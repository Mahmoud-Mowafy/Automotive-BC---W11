
LED_Sequence_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010be  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e1  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00002c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d95  00000000  00000000  000031ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_1>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	69 00       	.word	0x0069	; ????
  56:	6e 00       	.word	0x006e	; ????
  58:	73 00       	.word	0x0073	; ????
  5a:	78 00       	.word	0x0078	; ????
  5c:	7d 00       	.word	0x007d	; ????
  5e:	82 00       	.word	0x0082	; ????
  60:	87 00       	.word	0x0087	; ????
  62:	8c 00       	.word	0x008c	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a1 36       	cpi	r26, 0x61	; 97
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  84:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <App_init>:

static  uint8_t pressCounter = 0;
void App_init(void)
{
	//Define the required button pin ---> pin 2 in port D
	BUT_init(BUTT_PIN, BUTT_PORT);
  8c:	64 e4       	ldi	r22, 0x44	; 68
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	0e 94 a4 00 	call	0x148	; 0x148 <BUT_init>
	Dio_write(BUTT_PIN, BUTT_PORT, HIGH);
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	64 e4       	ldi	r22, 0x44	; 68
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	0e 94 97 01 	call	0x32e	; 0x32e <Dio_write>
	//Defines the required led pins---> 4 pins
	LEDs_Initialization(LEDS_NUMBER, LEDS_PORT);
  9e:	61 e4       	ldi	r22, 0x41	; 65
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	0e 94 b0 00 	call	0x160	; 0x160 <LEDs_Initialization>
	//Initially, all LEDs are OFF
	LEDs_off(LEDS_NUMBER, LEDS_PORT);
  a6:	61 e4       	ldi	r22, 0x41	; 65
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LEDs_off>
	interrupt_enable();
  ae:	0e 94 39 02 	call	0x472	; 0x472 <interrupt_enable>
	extInterrupt_init();	
  b2:	0e 94 3d 02 	call	0x47a	; 0x47a <extInterrupt_init>
  b6:	08 95       	ret

000000b8 <App_start>:

void App_start(void)
{
	while (1)
	{
		switch(pressCounter)
  b8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	8e 2f       	mov	r24, r30
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	fc 01       	movw	r30, r24
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	e8 30       	cpi	r30, 0x08	; 8
  c6:	f1 05       	cpc	r31, r1
  c8:	b8 f7       	brcc	.-18     	; 0xb8 <App_start>
  ca:	e6 5d       	subi	r30, 0xD6	; 214
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	0c 94 4a 02 	jmp	0x494	; 0x494 <__tablejump2__>
		{
			case 1:
			LED_on(0, PORT_A);
  d2:	61 e4       	ldi	r22, 0x41	; 65
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_on>
			break;
  da:	ee cf       	rjmp	.-36     	; 0xb8 <App_start>
			case 2:
			LED_on(1, PORT_A);
  dc:	61 e4       	ldi	r22, 0x41	; 65
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_on>
			break;
  e4:	e9 cf       	rjmp	.-46     	; 0xb8 <App_start>
			case 3:
			LED_on(2, PORT_A);
  e6:	61 e4       	ldi	r22, 0x41	; 65
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_on>
			break;
  ee:	e4 cf       	rjmp	.-56     	; 0xb8 <App_start>
			case 4:
			LED_on(3, PORT_A);
  f0:	61 e4       	ldi	r22, 0x41	; 65
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_on>
			break;
  f8:	df cf       	rjmp	.-66     	; 0xb8 <App_start>
			
			case 5:
			LED_off(0, PORT_A);
  fa:	61 e4       	ldi	r22, 0x41	; 65
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LED_off>
			break;
 102:	da cf       	rjmp	.-76     	; 0xb8 <App_start>
			case 6:
			LED_off(1, PORT_A);
 104:	61 e4       	ldi	r22, 0x41	; 65
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LED_off>
			break;
 10c:	d5 cf       	rjmp	.-86     	; 0xb8 <App_start>
			case 7:
			LED_off(2, PORT_A);
 10e:	61 e4       	ldi	r22, 0x41	; 65
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LED_off>
			break;
 116:	d0 cf       	rjmp	.-96     	; 0xb8 <App_start>
			case 8:
			LED_off(3, PORT_A);
 118:	61 e4       	ldi	r22, 0x41	; 65
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LED_off>
			pressCounter = 0;
 120:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 124:	c9 cf       	rjmp	.-110    	; 0xb8 <App_start>

00000126 <__vector_1>:
	}
}


ISR( EXT_INT0 )
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
	pressCounter++;
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <BUT_init>:
#include "button.h"

EN_butError_t BUT_init(uint8_t butPin, uint8_t butPort)
{
  
	uint8_t butError = Dio_init( butPin, butPort, INPUT );
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Dio_init>
	if( butError == DIO_OK )
 14e:	81 11       	cpse	r24, r1
	{
  		return BUT_OK;
	}
	return BUT_WRONG;
 150:	81 e0       	ldi	r24, 0x01	; 1
}
 152:	08 95       	ret

00000154 <LED_init>:
    {
      return LED_WRONG;
    }
  }
  return LED_OK;
}
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Dio_init>
 15a:	81 11       	cpse	r24, r1
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	08 95       	ret

00000160 <LEDs_Initialization>:
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	d8 2f       	mov	r29, r24
 168:	16 2f       	mov	r17, r22
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	07 c0       	rjmp	.+14     	; 0x17c <LEDs_Initialization+0x1c>
 16e:	61 2f       	mov	r22, r17
 170:	8c 2f       	mov	r24, r28
 172:	0e 94 aa 00 	call	0x154	; 0x154 <LED_init>
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	29 f0       	breq	.+10     	; 0x184 <LEDs_Initialization+0x24>
 17a:	cf 5f       	subi	r28, 0xFF	; 255
 17c:	cd 17       	cp	r28, r29
 17e:	b8 f3       	brcs	.-18     	; 0x16e <LEDs_Initialization+0xe>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	01 c0       	rjmp	.+2      	; 0x186 <LEDs_Initialization+0x26>
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	08 95       	ret

0000018e <LED_on>:
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	0e 94 97 01 	call	0x32e	; 0x32e <Dio_write>
 194:	87 30       	cpi	r24, 0x07	; 7
 196:	11 f4       	brne	.+4      	; 0x19c <LED_on+0xe>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	08 95       	ret

000001a0 <LED_off>:
	return LED_WRONG;	
}

EN_ledError_t LED_off(uint8_t ledPin, uint8_t ledPort)
{
	uint8_t LedError = Dio_write( ledPin, ledPort, LOW );
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	0e 94 97 01 	call	0x32e	; 0x32e <Dio_write>
	if( LedError == READ_OK )
 1a6:	87 30       	cpi	r24, 0x07	; 7
 1a8:	11 f4       	brne	.+4      	; 0x1ae <LED_off+0xe>
	{
		return LED_OK;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
	}
	return LED_WRONG;	
 1ae:	81 e0       	ldi	r24, 0x01	; 1
}
 1b0:	08 95       	ret

000001b2 <LEDs_off>:
  }
  return LED_OK;
}

EN_ledError_t LEDs_off(uint8_t ledsNumber, uint8_t ledPort)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	d8 2f       	mov	r29, r24
 1ba:	16 2f       	mov	r17, r22
  uint8_t loopCounter =0;
  int8_t LedError;
  for(loopCounter=0; loopCounter < ledsNumber; loopCounter++)
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <LEDs_off+0x1c>
  {
    LedError = LED_off(loopCounter, ledPort);
 1c0:	61 2f       	mov	r22, r17
 1c2:	8c 2f       	mov	r24, r28
 1c4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LED_off>
    if( LedError == LED_WRONG )
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	29 f0       	breq	.+10     	; 0x1d6 <LEDs_off+0x24>

EN_ledError_t LEDs_off(uint8_t ledsNumber, uint8_t ledPort)
{
  uint8_t loopCounter =0;
  int8_t LedError;
  for(loopCounter=0; loopCounter < ledsNumber; loopCounter++)
 1cc:	cf 5f       	subi	r28, 0xFF	; 255
 1ce:	cd 17       	cp	r28, r29
 1d0:	b8 f3       	brcs	.-18     	; 0x1c0 <LEDs_off+0xe>
    if( LedError == LED_WRONG )
    {
      return LED_WRONG;
    }
  }
  return LED_OK;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <LEDs_off+0x26>
  for(loopCounter=0; loopCounter < ledsNumber; loopCounter++)
  {
    LedError = LED_off(loopCounter, ledPort);
    if( LedError == LED_WRONG )
    {
      return LED_WRONG;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
  return LED_OK;
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <main>:

#include "main.h"

int main(void)
{
	App_init();
 1e0:	0e 94 46 00 	call	0x8c	; 0x8c <App_init>
	while(1)
	{
		App_start();
 1e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <App_start>
 1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <main+0x4>

000001ea <Dio_init>:

#include "dio.h"

EN_dioError_t Dio_init(uint8_t pinNumber, uint8_t portNumber, uint8_t pinDirection)
{
	if( pinNumber >= PORTWIDTH )
 1ea:	88 30       	cpi	r24, 0x08	; 8
 1ec:	08 f0       	brcs	.+2      	; 0x1f0 <Dio_init+0x6>
 1ee:	93 c0       	rjmp	.+294    	; 0x316 <Dio_init+0x12c>
		return WRONG_PIN;
	switch(portNumber)
 1f0:	62 34       	cpi	r22, 0x42	; 66
 1f2:	69 f1       	breq	.+90     	; 0x24e <Dio_init+0x64>
 1f4:	18 f4       	brcc	.+6      	; 0x1fc <Dio_init+0x12>
 1f6:	61 34       	cpi	r22, 0x41	; 65
 1f8:	41 f0       	breq	.+16     	; 0x20a <Dio_init+0x20>
 1fa:	8f c0       	rjmp	.+286    	; 0x31a <Dio_init+0x130>
 1fc:	63 34       	cpi	r22, 0x43	; 67
 1fe:	09 f4       	brne	.+2      	; 0x202 <Dio_init+0x18>
 200:	48 c0       	rjmp	.+144    	; 0x292 <Dio_init+0xa8>
 202:	64 34       	cpi	r22, 0x44	; 68
 204:	09 f4       	brne	.+2      	; 0x208 <Dio_init+0x1e>
 206:	66 c0       	rjmp	.+204    	; 0x2d4 <Dio_init+0xea>
 208:	88 c0       	rjmp	.+272    	; 0x31a <Dio_init+0x130>
	{
		case 'A':
		if(pinDirection == INPUT)
 20a:	41 11       	cpse	r20, r1
 20c:	0f c0       	rjmp	.+30     	; 0x22c <Dio_init+0x42>
		{
			CLEARE_BIT(DDRA, pinNumber);
 20e:	4a b3       	in	r20, 0x1a	; 26
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <Dio_init+0x32>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <Dio_init+0x2e>
 220:	cb 01       	movw	r24, r22
 222:	80 95       	com	r24
 224:	84 23       	and	r24, r20
 226:	8a bb       	out	0x1a, r24	; 26
		break;
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
		case 'A':
		if(pinDirection == INPUT)
		{
			CLEARE_BIT(DDRA, pinNumber);
		}
		else if(pinDirection == OUTPUT)
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	09 f0       	breq	.+2      	; 0x232 <Dio_init+0x48>
 230:	76 c0       	rjmp	.+236    	; 0x31e <Dio_init+0x134>
		{
			SET_BIT(DDRA, pinNumber);
 232:	4a b3       	in	r20, 0x1a	; 26
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <Dio_init+0x56>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	8a 95       	dec	r24
 242:	e2 f7       	brpl	.-8      	; 0x23c <Dio_init+0x52>
 244:	cb 01       	movw	r24, r22
 246:	84 2b       	or	r24, r20
 248:	8a bb       	out	0x1a, r24	; 26
		break;
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
		else
			return WRONG_DIR;
		break;
		
		case 'B':
		if(pinDirection == INPUT)
 24e:	41 11       	cpse	r20, r1
 250:	0f c0       	rjmp	.+30     	; 0x270 <Dio_init+0x86>
		{
			CLEARE_BIT(DDRB, pinNumber);
 252:	47 b3       	in	r20, 0x17	; 23
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <Dio_init+0x76>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <Dio_init+0x72>
 264:	cb 01       	movw	r24, r22
 266:	80 95       	com	r24
 268:	84 23       	and	r24, r20
 26a:	87 bb       	out	0x17, r24	; 23
		break;
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
		case 'B':
		if(pinDirection == INPUT)
		{
			CLEARE_BIT(DDRB, pinNumber);
		}
		else if(pinDirection == OUTPUT)
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	09 f0       	breq	.+2      	; 0x276 <Dio_init+0x8c>
 274:	56 c0       	rjmp	.+172    	; 0x322 <Dio_init+0x138>
		{
			SET_BIT(DDRB, pinNumber);
 276:	47 b3       	in	r20, 0x17	; 23
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	b9 01       	movw	r22, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <Dio_init+0x9a>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	8a 95       	dec	r24
 286:	e2 f7       	brpl	.-8      	; 0x280 <Dio_init+0x96>
 288:	cb 01       	movw	r24, r22
 28a:	84 2b       	or	r24, r20
 28c:	87 bb       	out	0x17, r24	; 23
		break;
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
		else
			return WRONG_DIR;
		break;
		
		case 'C':
		if(pinDirection == INPUT)
 292:	41 11       	cpse	r20, r1
 294:	0f c0       	rjmp	.+30     	; 0x2b4 <Dio_init+0xca>
		{
			CLEARE_BIT(DDRC, pinNumber);
 296:	44 b3       	in	r20, 0x14	; 20
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <Dio_init+0xba>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <Dio_init+0xb6>
 2a8:	cb 01       	movw	r24, r22
 2aa:	80 95       	com	r24
 2ac:	84 23       	and	r24, r20
 2ae:	84 bb       	out	0x14, r24	; 20
		break;
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
		case 'C':
		if(pinDirection == INPUT)
		{
			CLEARE_BIT(DDRC, pinNumber);
		}
		else if(pinDirection == OUTPUT)
 2b4:	41 30       	cpi	r20, 0x01	; 1
 2b6:	b9 f5       	brne	.+110    	; 0x326 <Dio_init+0x13c>
		{
			SET_BIT(DDRC, pinNumber);
 2b8:	44 b3       	in	r20, 0x14	; 20
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <Dio_init+0xdc>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	8a 95       	dec	r24
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <Dio_init+0xd8>
 2ca:	cb 01       	movw	r24, r22
 2cc:	84 2b       	or	r24, r20
 2ce:	84 bb       	out	0x14, r24	; 20
		break;
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
		else
			return WRONG_DIR;
		break;
		
		case 'D':
		if(pinDirection == INPUT)
 2d4:	41 11       	cpse	r20, r1
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <Dio_init+0x10c>
		{
			CLEARE_BIT(DDRD, pinNumber);
 2d8:	41 b3       	in	r20, 0x11	; 17
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	b9 01       	movw	r22, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <Dio_init+0xfc>
 2e2:	66 0f       	add	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	8a 95       	dec	r24
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <Dio_init+0xf8>
 2ea:	cb 01       	movw	r24, r22
 2ec:	80 95       	com	r24
 2ee:	84 23       	and	r24, r20
 2f0:	81 bb       	out	0x11, r24	; 17
		break;
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
		case 'D':
		if(pinDirection == INPUT)
		{
			CLEARE_BIT(DDRD, pinNumber);
		}
		else if(pinDirection == OUTPUT)
 2f6:	41 30       	cpi	r20, 0x01	; 1
 2f8:	c1 f4       	brne	.+48     	; 0x32a <Dio_init+0x140>
		{
			SET_BIT(DDRD, pinNumber);
 2fa:	41 b3       	in	r20, 0x11	; 17
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	b9 01       	movw	r22, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <Dio_init+0x11e>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	8a 95       	dec	r24
 30a:	e2 f7       	brpl	.-8      	; 0x304 <Dio_init+0x11a>
 30c:	cb 01       	movw	r24, r22
 30e:	84 2b       	or	r24, r20
 310:	81 bb       	out	0x11, r24	; 17
		break;
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
#include "dio.h"

EN_dioError_t Dio_init(uint8_t pinNumber, uint8_t portNumber, uint8_t pinDirection)
{
	if( pinNumber >= PORTWIDTH )
		return WRONG_PIN;
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	08 95       	ret
		else
			return WRONG_DIR;
		break;
		
		default:
			return WRONG_PORT;
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	08 95       	ret
		else if(pinDirection == OUTPUT)
		{
			SET_BIT(DDRA, pinNumber);
		}
		else
			return WRONG_DIR;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	08 95       	ret
		else if(pinDirection == OUTPUT)
		{
			SET_BIT(DDRB, pinNumber);
		}
		else
			return WRONG_DIR;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	08 95       	ret
		else if(pinDirection == OUTPUT)
		{
			SET_BIT(DDRC, pinNumber);
		}
		else
			return WRONG_DIR;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	08 95       	ret
		else if(pinDirection == OUTPUT)
		{
			SET_BIT(DDRD, pinNumber);
		}
		else
			return WRONG_DIR;
 32a:	81 e0       	ldi	r24, 0x01	; 1
		
		default:
			return WRONG_PORT;
	}
	return DIO_OK;
}
 32c:	08 95       	ret

0000032e <Dio_write>:

EN_dioError_t Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	if( pinNumber >= PORTWIDTH )
 32e:	88 30       	cpi	r24, 0x08	; 8
 330:	08 f0       	brcs	.+2      	; 0x334 <Dio_write+0x6>
 332:	93 c0       	rjmp	.+294    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		return WRONG_PIN;
	switch(portNumber)
 334:	62 34       	cpi	r22, 0x42	; 66
 336:	69 f1       	breq	.+90     	; 0x392 <Dio_write+0x64>
 338:	18 f4       	brcc	.+6      	; 0x340 <Dio_write+0x12>
 33a:	61 34       	cpi	r22, 0x41	; 65
 33c:	41 f0       	breq	.+16     	; 0x34e <Dio_write+0x20>
 33e:	8f c0       	rjmp	.+286    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 340:	63 34       	cpi	r22, 0x43	; 67
 342:	09 f4       	brne	.+2      	; 0x346 <Dio_write+0x18>
 344:	48 c0       	rjmp	.+144    	; 0x3d6 <Dio_write+0xa8>
 346:	64 34       	cpi	r22, 0x44	; 68
 348:	09 f4       	brne	.+2      	; 0x34c <Dio_write+0x1e>
 34a:	66 c0       	rjmp	.+204    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 34c:	88 c0       	rjmp	.+272    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
	{
		case 'A':
            if( value == LOW)
 34e:	41 11       	cpse	r20, r1
 350:	0f c0       	rjmp	.+30     	; 0x370 <Dio_write+0x42>
			{
				CLEARE_BIT(PORTA, pinNumber); // write 0 
 352:	4b b3       	in	r20, 0x1b	; 27
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <Dio_write+0x32>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	8a 95       	dec	r24
 362:	e2 f7       	brpl	.-8      	; 0x35c <Dio_write+0x2e>
 364:	cb 01       	movw	r24, r22
 366:	80 95       	com	r24
 368:	84 23       	and	r24, r20
 36a:	8b bb       	out	0x1b, r24	; 27
		break;
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	08 95       	ret
		case 'A':
            if( value == LOW)
			{
				CLEARE_BIT(PORTA, pinNumber); // write 0 
			}
			else if( value == HIGH)
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	09 f0       	breq	.+2      	; 0x376 <Dio_write+0x48>
 374:	76 c0       	rjmp	.+236    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			{
				SET_BIT(PORTA, pinNumber); // write 1 
 376:	4b b3       	in	r20, 0x1b	; 27
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <Dio_write+0x56>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	8a 95       	dec	r24
 386:	e2 f7       	brpl	.-8      	; 0x380 <Dio_write+0x52>
 388:	cb 01       	movw	r24, r22
 38a:	84 2b       	or	r24, r20
 38c:	8b bb       	out	0x1b, r24	; 27
		break;
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	08 95       	ret
			else 
				return WRONG_VAL;
		break;
		
		case 'B':
            if( value == LOW)
 392:	41 11       	cpse	r20, r1
 394:	0f c0       	rjmp	.+30     	; 0x3b4 <Dio_write+0x86>
            {
	            CLEARE_BIT(PORTB, pinNumber); // write 0 
 396:	48 b3       	in	r20, 0x18	; 24
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	b9 01       	movw	r22, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Dio_write+0x76>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <Dio_write+0x72>
 3a8:	cb 01       	movw	r24, r22
 3aa:	80 95       	com	r24
 3ac:	84 23       	and	r24, r20
 3ae:	88 bb       	out	0x18, r24	; 24
		break;
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	08 95       	ret
		case 'B':
            if( value == LOW)
            {
	            CLEARE_BIT(PORTB, pinNumber); // write 0 
            }
            else if( value == HIGH)
 3b4:	41 30       	cpi	r20, 0x01	; 1
 3b6:	09 f0       	breq	.+2      	; 0x3ba <Dio_write+0x8c>
 3b8:	56 c0       	rjmp	.+172    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
            {
	            SET_BIT(PORTB, pinNumber); // write 1 
 3ba:	48 b3       	in	r20, 0x18	; 24
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	b9 01       	movw	r22, r18
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <Dio_write+0x9a>
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	8a 95       	dec	r24
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <Dio_write+0x96>
 3cc:	cb 01       	movw	r24, r22
 3ce:	84 2b       	or	r24, r20
 3d0:	88 bb       	out	0x18, r24	; 24
		break;
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
 3d2:	84 e0       	ldi	r24, 0x04	; 4
 3d4:	08 95       	ret
            else
				return WRONG_VAL;
		break;
		
		case 'C':
            if( value == LOW)
 3d6:	41 11       	cpse	r20, r1
 3d8:	0f c0       	rjmp	.+30     	; 0x3f8 <Dio_write+0xca>
            {
	            CLEARE_BIT(PORTC, pinNumber); // write 0 
 3da:	45 b3       	in	r20, 0x15	; 21
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	b9 01       	movw	r22, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <Dio_write+0xba>
 3e4:	66 0f       	add	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	8a 95       	dec	r24
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <Dio_write+0xb6>
 3ec:	cb 01       	movw	r24, r22
 3ee:	80 95       	com	r24
 3f0:	84 23       	and	r24, r20
 3f2:	85 bb       	out	0x15, r24	; 21
		break;
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
 3f4:	84 e0       	ldi	r24, 0x04	; 4
 3f6:	08 95       	ret
		case 'C':
            if( value == LOW)
            {
	            CLEARE_BIT(PORTC, pinNumber); // write 0 
            }
            else if( value == HIGH)
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	b9 f5       	brne	.+110    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
            {
	            SET_BIT(PORTC, pinNumber); // write 1 
 3fc:	45 b3       	in	r20, 0x15	; 21
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	b9 01       	movw	r22, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	84 2b       	or	r24, r20
 412:	85 bb       	out	0x15, r24	; 21
		break;
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	08 95       	ret
            else
				return WRONG_VAL;
		break;
		
		case 'D':
            if( value == LOW)
 418:	41 11       	cpse	r20, r1
 41a:	0f c0       	rjmp	.+30     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
            {
	            CLEARE_BIT(PORTD, pinNumber); // write 0  
 41c:	42 b3       	in	r20, 0x12	; 18
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	8a 95       	dec	r24
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	cb 01       	movw	r24, r22
 430:	80 95       	com	r24
 432:	84 23       	and	r24, r20
 434:	82 bb       	out	0x12, r24	; 18
		break;
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	08 95       	ret
		case 'D':
            if( value == LOW)
            {
	            CLEARE_BIT(PORTD, pinNumber); // write 0  
            }
            else if( value == HIGH)
 43a:	41 30       	cpi	r20, 0x01	; 1
 43c:	c1 f4       	brne	.+48     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
            {
	            SET_BIT(PORTD, pinNumber); // write 1  
 43e:	42 b3       	in	r20, 0x12	; 18
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	b9 01       	movw	r22, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	8a 95       	dec	r24
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	cb 01       	movw	r24, r22
 452:	84 2b       	or	r24, r20
 454:	82 bb       	out	0x12, r24	; 18
		break;
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	08 95       	ret
}

EN_dioError_t Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	if( pinNumber >= PORTWIDTH )
		return WRONG_PIN;
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	08 95       	ret
            else
				return WRONG_VAL;
		break;
		
		default:
			return WRONG_PORT;
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	08 95       	ret
			else if( value == HIGH)
			{
				SET_BIT(PORTA, pinNumber); // write 1 
			}
			else 
				return WRONG_VAL;
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	08 95       	ret
            else if( value == HIGH)
            {
	            SET_BIT(PORTB, pinNumber); // write 1 
            }
            else
				return WRONG_VAL;
 466:	85 e0       	ldi	r24, 0x05	; 5
 468:	08 95       	ret
            else if( value == HIGH)
            {
	            SET_BIT(PORTC, pinNumber); // write 1 
            }
            else
				return WRONG_VAL;
 46a:	85 e0       	ldi	r24, 0x05	; 5
 46c:	08 95       	ret
            else if( value == HIGH)
            {
	            SET_BIT(PORTD, pinNumber); // write 1  
            }
            else
				return WRONG_VAL;
 46e:	85 e0       	ldi	r24, 0x05	; 5
		
		default:
			return WRONG_PORT;
	}
	return WRITE_OK;	
}
 470:	08 95       	ret

00000472 <interrupt_enable>:
#include "EXTI.h"


void interrupt_enable(void)
{
	SET_BIT(SREG, GENERAL_INT_ENABLE);
 472:	8f b7       	in	r24, 0x3f	; 63
 474:	80 68       	ori	r24, 0x80	; 128
 476:	8f bf       	out	0x3f, r24	; 63
 478:	08 95       	ret

0000047a <extInterrupt_init>:
}


void extInterrupt_init(void)
{
 	SET_BIT(SFIOR, PUD);
 47a:	80 b7       	in	r24, 0x30	; 48
 47c:	84 60       	ori	r24, 0x04	; 4
 47e:	80 bf       	out	0x30, r24	; 48
 	SET_BIT(GICR, EXTERNAL_INTERRUPT_REQUEST_0);
 480:	8b b7       	in	r24, 0x3b	; 59
 482:	80 64       	ori	r24, 0x40	; 64
 484:	8b bf       	out	0x3b, r24	; 59
 	CLEARE_BIT(MCUCR, INTERRUPT_SENSE_CONTROL_0_BIT_0);
 486:	85 b7       	in	r24, 0x35	; 53
 488:	8e 7f       	andi	r24, 0xFE	; 254
 48a:	85 bf       	out	0x35, r24	; 53
 	SET_BIT(MCUCR, INTERRUPT_SENSE_CONTROL_0_BIT_1);
 48c:	85 b7       	in	r24, 0x35	; 53
 48e:	82 60       	ori	r24, 0x02	; 2
 490:	85 bf       	out	0x35, r24	; 53
 492:	08 95       	ret

00000494 <__tablejump2__>:
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	05 90       	lpm	r0, Z+
 49a:	f4 91       	lpm	r31, Z
 49c:	e0 2d       	mov	r30, r0
 49e:	09 94       	ijmp

000004a0 <_exit>:
 4a0:	f8 94       	cli

000004a2 <__stop_program>:
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <__stop_program>

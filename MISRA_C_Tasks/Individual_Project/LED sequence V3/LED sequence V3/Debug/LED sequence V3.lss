
LED sequence V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001044  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000010b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  000010b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fa  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0c  00000000  00000000  00002aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000034ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  0000443c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006af  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001372  00000000  00000000  00004e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000061b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_1>
       8:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_2>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 bc 03 	call	0x778	; 0x778 <main>
      74:	0c 94 20 08 	jmp	0x1040	; 0x1040 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:
uint32_t g_tick=0  ;
double onTime , offTime, mask;
EN_appError_t App_init(void)
{
	//Define the required button pin ---> pin 2 in port D for Ext_interrupt_0
	BUT_init(BUTT_PIN_0, BUTT_PORT);
      7c:	64 e4       	ldi	r22, 0x44	; 68
      7e:	82 e0       	ldi	r24, 0x02	; 2
      80:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BUT_init>
	Dio_write(BUTT_PIN_0, BUTT_PORT, HIGH);
      84:	41 e0       	ldi	r20, 0x01	; 1
      86:	64 e4       	ldi	r22, 0x44	; 68
      88:	82 e0       	ldi	r24, 0x02	; 2
      8a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <Dio_write>
	
	//Define the required button pin ---> pin 3 in port D for Ext_interrupt_1
	BUT_init(BUTT_PIN_1, BUTT_PORT);
      8e:	64 e4       	ldi	r22, 0x44	; 68
      90:	83 e0       	ldi	r24, 0x03	; 3
      92:	0e 94 54 03 	call	0x6a8	; 0x6a8 <BUT_init>
	Dio_write(BUTT_PIN_1, BUTT_PORT, HIGH);
      96:	41 e0       	ldi	r20, 0x01	; 1
      98:	64 e4       	ldi	r22, 0x44	; 68
      9a:	83 e0       	ldi	r24, 0x03	; 3
      9c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <Dio_write>
		
	//Defines the required led pins---> 4 pins
	LEDs_Initialization(LEDS_NUMBER, LEDS_PORT);
      a0:	61 e4       	ldi	r22, 0x41	; 65
      a2:	84 e0       	ldi	r24, 0x04	; 4
      a4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LEDs_Initialization>
	//Initially, all LEDs are OFF
	LEDs_off(LEDS_NUMBER, LEDS_PORT);
      a8:	61 e4       	ldi	r22, 0x41	; 65
      aa:	84 e0       	ldi	r24, 0x04	; 4
      ac:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
	
	//Initializing the used interrupts
	interrupt_enable();
      b0:	0e 94 09 05 	call	0xa12	; 0xa12 <interrupt_enable>
	/*For Presses Counts*/
	extInterrupt_0_init();
      b4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <extInterrupt_0_init>
	/*For Blink Switching */
	extInterrupt_1_init();
      b8:	0e 94 1a 05 	call	0xa34	; 0xa34 <extInterrupt_1_init>
	
	timer0_init();
      bc:	0e 94 27 05 	call	0xa4e	; 0xa4e <timer0_init>
	return APP_OK;
}
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	08 95       	ret

000000c4 <executeBlinking>:
}

EN_appError_t executeBlinking(void)
{

		if(pressCounter == 1)
      c4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <pressCounter>
      c8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <pressCounter+0x1>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	09 f0       	breq	.+2      	; 0xd4 <executeBlinking+0x10>
      d2:	3f c0       	rjmp	.+126    	; 0x152 <executeBlinking+0x8e>
		{
			LED_on(0, PORT_A);
      d4:	61 e4       	ldi	r22, 0x41	; 65
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			timer_stop();
      dc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay(onTime);
      e0:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <onTime>
      e4:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <onTime+0x1>
      e8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <onTime+0x2>
      ec:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <onTime+0x3>
      f0:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
      f4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      f8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     100:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     104:	28 17       	cp	r18, r24
     106:	39 07       	cpc	r19, r25
     108:	a9 f7       	brne	.-22     	; 0xf4 <executeBlinking+0x30>
			g_tick=0;
     10a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     10e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			LEDs_off(4, PORT_A);
     112:	61 e4       	ldi	r22, 0x41	; 65
     114:	84 e0       	ldi	r24, 0x04	; 4
     116:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
			timer_stop();
     11a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay(onTime);
     11e:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <onTime>
     122:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <onTime+0x1>
     126:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <onTime+0x2>
     12a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <onTime+0x3>
     12e:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     132:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     136:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     13a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     13e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     142:	28 17       	cp	r18, r24
     144:	39 07       	cpc	r19, r25
     146:	a9 f7       	brne	.-22     	; 0x132 <executeBlinking+0x6e>
			g_tick=0;
     148:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     14c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     150:	db c1       	rjmp	.+950    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		}

		else if(pressCounter == 2)
     152:	82 30       	cpi	r24, 0x02	; 2
     154:	91 05       	cpc	r25, r1
     156:	09 f0       	breq	.+2      	; 0x15a <executeBlinking+0x96>
     158:	43 c0       	rjmp	.+134    	; 0x1e0 <executeBlinking+0x11c>
		{
			LED_on(0, PORT_A);
     15a:	61 e4       	ldi	r22, 0x41	; 65
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(1, PORT_A);
     162:	61 e4       	ldi	r22, 0x41	; 65
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			timer_stop();
     16a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( onTime);
     16e:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <onTime>
     172:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <onTime+0x1>
     176:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <onTime+0x2>
     17a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <onTime+0x3>
     17e:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     182:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     186:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     18a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     18e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     192:	28 17       	cp	r18, r24
     194:	39 07       	cpc	r19, r25
     196:	a9 f7       	brne	.-22     	; 0x182 <executeBlinking+0xbe>
			g_tick=0;
     198:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     19c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			LEDs_off(4, PORT_A);
     1a0:	61 e4       	ldi	r22, 0x41	; 65
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
			timer_stop();
     1a8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( offTime);
     1ac:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <offTime>
     1b0:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <offTime+0x1>
     1b4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <offTime+0x2>
     1b8:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <offTime+0x3>
     1bc:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     1c0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1c4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1c8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     1cc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     1d0:	28 17       	cp	r18, r24
     1d2:	39 07       	cpc	r19, r25
     1d4:	a9 f7       	brne	.-22     	; 0x1c0 <executeBlinking+0xfc>
			g_tick=0;
     1d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     1de:	94 c1       	rjmp	.+808    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		}
		
		else if(pressCounter == 3)
     1e0:	83 30       	cpi	r24, 0x03	; 3
     1e2:	91 05       	cpc	r25, r1
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <executeBlinking+0x124>
     1e6:	47 c0       	rjmp	.+142    	; 0x276 <executeBlinking+0x1b2>
		{
			LED_on(0, PORT_A);
     1e8:	61 e4       	ldi	r22, 0x41	; 65
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(1, PORT_A);
     1f0:	61 e4       	ldi	r22, 0x41	; 65
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(2, PORT_A);
     1f8:	61 e4       	ldi	r22, 0x41	; 65
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			timer_stop();
     200:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( onTime);
     204:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <onTime>
     208:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <onTime+0x1>
     20c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <onTime+0x2>
     210:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <onTime+0x3>
     214:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     218:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     21c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     220:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     224:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     228:	28 17       	cp	r18, r24
     22a:	39 07       	cpc	r19, r25
     22c:	a9 f7       	brne	.-22     	; 0x218 <executeBlinking+0x154>
			g_tick=0;
     22e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     232:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			LEDs_off(4, PORT_A);
     236:	61 e4       	ldi	r22, 0x41	; 65
     238:	84 e0       	ldi	r24, 0x04	; 4
     23a:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
			timer_stop();
     23e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( offTime);
     242:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <offTime>
     246:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <offTime+0x1>
     24a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <offTime+0x2>
     24e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <offTime+0x3>
     252:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     256:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     25a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     25e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     262:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     266:	28 17       	cp	r18, r24
     268:	39 07       	cpc	r19, r25
     26a:	a9 f7       	brne	.-22     	; 0x256 <executeBlinking+0x192>
			g_tick=0;
     26c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     270:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     274:	49 c1       	rjmp	.+658    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		}
		
		else if(pressCounter == 4)
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	91 05       	cpc	r25, r1
     27a:	09 f0       	breq	.+2      	; 0x27e <executeBlinking+0x1ba>
     27c:	4b c0       	rjmp	.+150    	; 0x314 <executeBlinking+0x250>
		{
			LED_on(0, PORT_A);
     27e:	61 e4       	ldi	r22, 0x41	; 65
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(1, PORT_A);
     286:	61 e4       	ldi	r22, 0x41	; 65
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(2, PORT_A);
     28e:	61 e4       	ldi	r22, 0x41	; 65
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(3, PORT_A);
     296:	61 e4       	ldi	r22, 0x41	; 65
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			timer_stop();
     29e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( onTime);
     2a2:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <onTime>
     2a6:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <onTime+0x1>
     2aa:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <onTime+0x2>
     2ae:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <onTime+0x3>
     2b2:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     2b6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2ba:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2be:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     2c2:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     2c6:	28 17       	cp	r18, r24
     2c8:	39 07       	cpc	r19, r25
     2ca:	a9 f7       	brne	.-22     	; 0x2b6 <executeBlinking+0x1f2>
			g_tick=0;
     2cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			LEDs_off(4, PORT_A);
     2d4:	61 e4       	ldi	r22, 0x41	; 65
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
			timer_stop();
     2dc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( offTime);
     2e0:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <offTime>
     2e4:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <offTime+0x1>
     2e8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <offTime+0x2>
     2ec:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <offTime+0x3>
     2f0:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     2f4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     300:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     304:	28 17       	cp	r18, r24
     306:	39 07       	cpc	r19, r25
     308:	a9 f7       	brne	.-22     	; 0x2f4 <executeBlinking+0x230>
			g_tick=0;
     30a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     30e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     312:	fa c0       	rjmp	.+500    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		}

		else if(pressCounter == 5)
     314:	85 30       	cpi	r24, 0x05	; 5
     316:	91 05       	cpc	r25, r1
     318:	09 f0       	breq	.+2      	; 0x31c <executeBlinking+0x258>
     31a:	47 c0       	rjmp	.+142    	; 0x3aa <executeBlinking+0x2e6>
		{
			LED_on(1, PORT_A);
     31c:	61 e4       	ldi	r22, 0x41	; 65
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(2, PORT_A);
     324:	61 e4       	ldi	r22, 0x41	; 65
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(3, PORT_A);
     32c:	61 e4       	ldi	r22, 0x41	; 65
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			timer_stop();
     334:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( onTime);
     338:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <onTime>
     33c:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <onTime+0x1>
     340:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <onTime+0x2>
     344:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <onTime+0x3>
     348:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     34c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     350:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     354:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     358:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     35c:	28 17       	cp	r18, r24
     35e:	39 07       	cpc	r19, r25
     360:	a9 f7       	brne	.-22     	; 0x34c <executeBlinking+0x288>
			g_tick=0;
     362:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     366:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			LEDs_off(4, PORT_A);
     36a:	61 e4       	ldi	r22, 0x41	; 65
     36c:	84 e0       	ldi	r24, 0x04	; 4
     36e:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
			timer_stop();
     372:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( offTime);
     376:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <offTime>
     37a:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <offTime+0x1>
     37e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <offTime+0x2>
     382:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <offTime+0x3>
     386:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     38a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     38e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     392:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     396:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     39a:	28 17       	cp	r18, r24
     39c:	39 07       	cpc	r19, r25
     39e:	a9 f7       	brne	.-22     	; 0x38a <executeBlinking+0x2c6>
			g_tick=0;
     3a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     3a8:	af c0       	rjmp	.+350    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		}
		
		else if(pressCounter == 6)
     3aa:	86 30       	cpi	r24, 0x06	; 6
     3ac:	91 05       	cpc	r25, r1
     3ae:	09 f0       	breq	.+2      	; 0x3b2 <executeBlinking+0x2ee>
     3b0:	43 c0       	rjmp	.+134    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		{
			LED_on(2, PORT_A);
     3b2:	61 e4       	ldi	r22, 0x41	; 65
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			LED_on(3, PORT_A);
     3ba:	61 e4       	ldi	r22, 0x41	; 65
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			timer_stop();
     3c2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( onTime);
     3c6:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <onTime>
     3ca:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <onTime+0x1>
     3ce:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <onTime+0x2>
     3d2:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <onTime+0x3>
     3d6:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     3da:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3de:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3e2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     3e6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     3ea:	28 17       	cp	r18, r24
     3ec:	39 07       	cpc	r19, r25
     3ee:	a9 f7       	brne	.-22     	; 0x3da <executeBlinking+0x316>
			g_tick=0;
     3f0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			LEDs_off(4, PORT_A);
     3f8:	61 e4       	ldi	r22, 0x41	; 65
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
			timer_stop();
     400:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( offTime);
     404:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <offTime>
     408:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <offTime+0x1>
     40c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <offTime+0x2>
     410:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <offTime+0x3>
     414:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     418:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     41c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     420:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     424:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     428:	28 17       	cp	r18, r24
     42a:	39 07       	cpc	r19, r25
     42c:	a9 f7       	brne	.-22     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			g_tick=0;
     42e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     432:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     436:	68 c0       	rjmp	.+208    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		}
		
		else if(pressCounter == 7)
     438:	87 30       	cpi	r24, 0x07	; 7
     43a:	91 05       	cpc	r25, r1
     43c:	09 f0       	breq	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43e:	3f c0       	rjmp	.+126    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		{
			LED_on(3, PORT_A);
     440:	61 e4       	ldi	r22, 0x41	; 65
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	0e 94 88 03 	call	0x710	; 0x710 <LED_on>
			timer_stop();
     448:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( onTime);
     44c:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <onTime>
     450:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <onTime+0x1>
     454:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <onTime+0x2>
     458:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <onTime+0x3>
     45c:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     460:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     464:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     468:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     46c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     470:	28 17       	cp	r18, r24
     472:	39 07       	cpc	r19, r25
     474:	a9 f7       	brne	.-22     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
			g_tick=0;
     476:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     47a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			LEDs_off(4, PORT_A);
     47e:	61 e4       	ldi	r22, 0x41	; 65
     480:	84 e0       	ldi	r24, 0x04	; 4
     482:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
			timer_stop();
     486:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay(offTime);
     48a:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <offTime>
     48e:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <offTime+0x1>
     492:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <offTime+0x2>
     496:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <offTime+0x3>
     49a:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     49e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4a2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4a6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     4aa:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     4ae:	28 17       	cp	r18, r24
     4b0:	39 07       	cpc	r19, r25
     4b2:	a9 f7       	brne	.-22     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			g_tick=0;
     4b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     4bc:	25 c0       	rjmp	.+74     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		}
		
		else if(pressCounter == 8)
     4be:	08 97       	sbiw	r24, 0x08	; 8
     4c0:	19 f5       	brne	.+70     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		{
			LEDs_off(4, PORT_A);
     4c2:	61 e4       	ldi	r22, 0x41	; 65
     4c4:	84 e0       	ldi	r24, 0x04	; 4
     4c6:	0e 94 9e 03 	call	0x73c	; 0x73c <LEDs_off>
			timer_stop();
     4ca:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <timer_stop>
			timer_delay( offTime);
     4ce:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <offTime>
     4d2:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <offTime+0x1>
     4d6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <offTime+0x2>
     4da:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <offTime+0x3>
     4de:	0e 94 83 05 	call	0xb06	; 0xb06 <timer_delay>
			while(  g_tick != OVFs );
     4e2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4e6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4ea:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFs>
     4ee:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFs+0x1>
     4f2:	28 17       	cp	r18, r24
     4f4:	39 07       	cpc	r19, r25
     4f6:	a9 f7       	brne	.-22     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
			g_tick=0;
     4f8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			pressCounter = 0;
     500:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <pressCounter+0x1>
     504:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <pressCounter>
		}	
	return APP_OK;
}
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	08 95       	ret

0000050c <App_start>:
	return APP_OK;
}

EN_appError_t App_start(void)
{
	executeBlinking();
     50c:	0e 94 62 00 	call	0xc4	; 0xc4 <executeBlinking>
	return APP_OK;
}
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	08 95       	ret

00000514 <__vector_1>:
		}	
	return APP_OK;
}

ISR( EXT_INT0 )
{
     514:	1f 92       	push	r1
     516:	0f 92       	push	r0
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	0f 92       	push	r0
     51c:	11 24       	eor	r1, r1
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	af 93       	push	r26
     524:	bf 93       	push	r27
	BlinkMode++;
     526:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BlinkMode>
     52a:	8f 5f       	subi	r24, 0xFF	; 255
     52c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <BlinkMode>
		if(BlinkMode == 1)
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	c9 f4       	brne	.+50     	; 0x566 <__vector_1+0x52>
		{
			onTime = 100.0f;
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	a8 ec       	ldi	r26, 0xC8	; 200
     53a:	b2 e4       	ldi	r27, 0x42	; 66
     53c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <onTime>
     540:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <onTime+0x1>
     544:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <onTime+0x2>
     548:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <onTime+0x3>
			offTime = 900.0f;
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	a1 e6       	ldi	r26, 0x61	; 97
     552:	b4 e4       	ldi	r27, 0x44	; 68
     554:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <offTime>
     558:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <offTime+0x1>
     55c:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <offTime+0x2>
     560:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <offTime+0x3>
     564:	6a c0       	rjmp	.+212    	; 0x63a <__vector_1+0x126>
		}
		else if (BlinkMode == 2)
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	c9 f4       	brne	.+50     	; 0x59c <__vector_1+0x88>
		{
			onTime = 200.0f;
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	a8 e4       	ldi	r26, 0x48	; 72
     570:	b3 e4       	ldi	r27, 0x43	; 67
     572:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <onTime>
     576:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <onTime+0x1>
     57a:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <onTime+0x2>
     57e:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <onTime+0x3>
			offTime = 800.0f;
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	a8 e4       	ldi	r26, 0x48	; 72
     588:	b4 e4       	ldi	r27, 0x44	; 68
     58a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <offTime>
     58e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <offTime+0x1>
     592:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <offTime+0x2>
     596:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <offTime+0x3>
     59a:	4f c0       	rjmp	.+158    	; 0x63a <__vector_1+0x126>
		}
		else if (BlinkMode == 3)
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	c9 f4       	brne	.+50     	; 0x5d2 <__vector_1+0xbe>
		{
			onTime = 300.0f;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	a6 e9       	ldi	r26, 0x96	; 150
     5a6:	b3 e4       	ldi	r27, 0x43	; 67
     5a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <onTime>
     5ac:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <onTime+0x1>
     5b0:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <onTime+0x2>
     5b4:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <onTime+0x3>
			offTime = 700.0f;			
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	af e2       	ldi	r26, 0x2F	; 47
     5be:	b4 e4       	ldi	r27, 0x44	; 68
     5c0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <offTime>
     5c4:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <offTime+0x1>
     5c8:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <offTime+0x2>
     5cc:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <offTime+0x3>
     5d0:	34 c0       	rjmp	.+104    	; 0x63a <__vector_1+0x126>
		}
		else if (BlinkMode == 4)
     5d2:	84 30       	cpi	r24, 0x04	; 4
     5d4:	a9 f4       	brne	.+42     	; 0x600 <__vector_1+0xec>
		{
			onTime = 500;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	aa ef       	ldi	r26, 0xFA	; 250
     5dc:	b3 e4       	ldi	r27, 0x43	; 67
     5de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <onTime>
     5e2:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <onTime+0x1>
     5e6:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <onTime+0x2>
     5ea:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <onTime+0x3>
			offTime = 500;			
     5ee:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <offTime>
     5f2:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <offTime+0x1>
     5f6:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <offTime+0x2>
     5fa:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <offTime+0x3>
     5fe:	1d c0       	rjmp	.+58     	; 0x63a <__vector_1+0x126>
		}
	   else if (BlinkMode == 5)
     600:	85 30       	cpi	r24, 0x05	; 5
     602:	c9 f4       	brne	.+50     	; 0x636 <__vector_1+0x122>
	   {
			onTime = 800;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	a8 e4       	ldi	r26, 0x48	; 72
     60a:	b4 e4       	ldi	r27, 0x44	; 68
     60c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <onTime>
     610:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <onTime+0x1>
     614:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <onTime+0x2>
     618:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <onTime+0x3>
			offTime = 200;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a8 e4       	ldi	r26, 0x48	; 72
     622:	b3 e4       	ldi	r27, 0x43	; 67
     624:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <offTime>
     628:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <offTime+0x1>
     62c:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <offTime+0x2>
     630:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <offTime+0x3>
     634:	02 c0       	rjmp	.+4      	; 0x63a <__vector_1+0x126>
	   }
	   else
		{
			BlinkMode=0;	
     636:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <BlinkMode>
		}

}
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <__vector_2>:

ISR( EXT_INT1 )
{
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	0f 92       	push	r0
     654:	11 24       	eor	r1, r1
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
	pressCounter++;
     65a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <pressCounter>
     65e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <pressCounter+0x1>
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <pressCounter+0x1>
     668:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <pressCounter>
}
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_11>:
ISR( TIMER0_OVF )
{
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
	g_tick++;
     688:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     68c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     696:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <BUT_init>:
#include "button.h"

int BUT_init(uint8_t butPin, uint8_t butPort)
{
  
	uint8_t butError = Dio_init( butPin, butPort, INPUT );
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	0e 94 c1 03 	call	0x782	; 0x782 <Dio_init>
	int retVal = (int) BUT_WRONG;
	if( butError == DIO_OK )
     6ae:	81 11       	cpse	r24, r1
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <BUT_init+0x10>
	{
  		retVal = (int) BUT_OK;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	08 95       	ret
	}
	else
	{
		retVal = (int) BUT_WRONG;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
	}
	return retVal;
}
     6bc:	08 95       	ret

000006be <LED_init>:
    {
      retVal = (int) LED_WRONG;
    }
  }
  return retVal;
}
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	0e 94 c1 03 	call	0x782	; 0x782 <Dio_init>
     6c4:	88 23       	and	r24, r24
     6c6:	19 f0       	breq	.+6      	; 0x6ce <LED_init+0x10>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	08 95       	ret
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	08 95       	ret

000006d4 <LEDs_Initialization>:
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	d8 2f       	mov	r29, r24
     6e0:	16 2f       	mov	r17, r22
     6e2:	e1 2c       	mov	r14, r1
     6e4:	f1 2c       	mov	r15, r1
     6e6:	c0 e0       	ldi	r28, 0x00	; 0
     6e8:	0a c0       	rjmp	.+20     	; 0x6fe <LEDs_Initialization+0x2a>
     6ea:	61 2f       	mov	r22, r17
     6ec:	8c 2f       	mov	r24, r28
     6ee:	0e 94 5f 03 	call	0x6be	; 0x6be <LED_init>
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	19 f4       	brne	.+6      	; 0x6fc <LEDs_Initialization+0x28>
     6f6:	ee 24       	eor	r14, r14
     6f8:	e3 94       	inc	r14
     6fa:	f1 2c       	mov	r15, r1
     6fc:	cf 5f       	subi	r28, 0xFF	; 255
     6fe:	cd 17       	cp	r28, r29
     700:	a0 f3       	brcs	.-24     	; 0x6ea <LEDs_Initialization+0x16>
     702:	c7 01       	movw	r24, r14
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <LED_on>:
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	0e 94 5e 04 	call	0x8bc	; 0x8bc <Dio_write>
     716:	84 30       	cpi	r24, 0x04	; 4
     718:	19 f4       	brne	.+6      	; 0x720 <LED_on+0x10>
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	08 95       	ret
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	08 95       	ret

00000726 <LED_off>:
	return retVal;
}

int LED_off(uint8_t ledPin, uint8_t ledPort)
{
	uint8_t LedError = Dio_write( ledPin, ledPort, LOW );
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	0e 94 5e 04 	call	0x8bc	; 0x8bc <Dio_write>
	int retVal = (int) LED_WRONG;
	if( LedError == WRITE_OK )
     72c:	84 30       	cpi	r24, 0x04	; 4
     72e:	19 f4       	brne	.+6      	; 0x736 <LED_off+0x10>
	{
		retVal = (int) LED_OK;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	08 95       	ret
	}
	else
	{
		retVal = (int) LED_WRONG;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
	}
	return retVal;
}
     73a:	08 95       	ret

0000073c <LEDs_off>:
  }
  return retVal;
}

int LEDs_off(uint8_t ledsNumber, uint8_t ledPort)
{
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	d8 2f       	mov	r29, r24
     748:	16 2f       	mov	r17, r22
  uint8_t loopCounter =0;
  int8_t LedError;
  int retVal = (int) LED_OK;
     74a:	e1 2c       	mov	r14, r1
     74c:	f1 2c       	mov	r15, r1
  for(loopCounter=0; loopCounter < ledsNumber; loopCounter++)
     74e:	c0 e0       	ldi	r28, 0x00	; 0
     750:	0a c0       	rjmp	.+20     	; 0x766 <LEDs_off+0x2a>
  {
    LedError = LED_off(loopCounter, ledPort);
     752:	61 2f       	mov	r22, r17
     754:	8c 2f       	mov	r24, r28
     756:	0e 94 93 03 	call	0x726	; 0x726 <LED_off>
    if( LedError == LED_WRONG )
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	19 f4       	brne	.+6      	; 0x764 <LEDs_off+0x28>
    {
      retVal = (int) LED_WRONG;
     75e:	ee 24       	eor	r14, r14
     760:	e3 94       	inc	r14
     762:	f1 2c       	mov	r15, r1
int LEDs_off(uint8_t ledsNumber, uint8_t ledPort)
{
  uint8_t loopCounter =0;
  int8_t LedError;
  int retVal = (int) LED_OK;
  for(loopCounter=0; loopCounter < ledsNumber; loopCounter++)
     764:	cf 5f       	subi	r28, 0xFF	; 255
     766:	cd 17       	cp	r28, r29
     768:	a0 f3       	brcs	.-24     	; 0x752 <LEDs_off+0x16>
      retVal = (int) LED_WRONG;
    }
  }
  return retVal;

}
     76a:	c7 01       	movw	r24, r14
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	08 95       	ret

00000778 <main>:


int main(void)
{
    /* Replace with your application code */
	App_init();
     778:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
    while (1) 
    {
		App_start();
     77c:	0e 94 86 02 	call	0x50c	; 0x50c <App_start>
     780:	fd cf       	rjmp	.-6      	; 0x77c <main+0x4>

00000782 <Dio_init>:
// function definitions

#include "dio.h"

int Dio_init(uint8_t pinNumber, uint8_t portNumber, uint8_t pinDirection)
{
     782:	28 2f       	mov	r18, r24
	int retVal = (int) DIO_OK;
	if( ( pinNumber >= PORTWIDTH ) )
     784:	88 30       	cpi	r24, 0x08	; 8
     786:	18 f4       	brcc	.+6      	; 0x78e <Dio_init+0xc>

#include "dio.h"

int Dio_init(uint8_t pinNumber, uint8_t portNumber, uint8_t pinDirection)
{
	int retVal = (int) DIO_OK;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	02 c0       	rjmp	.+4      	; 0x792 <Dio_init+0x10>
	if( ( pinNumber >= PORTWIDTH ) )
	{
		retVal = (int)  WRONG_PIN;
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	90 e0       	ldi	r25, 0x00	; 0
	}
    if( portNumber == 'A' )
     792:	61 34       	cpi	r22, 0x41	; 65
     794:	01 f5       	brne	.+64     	; 0x7d6 <Dio_init+0x54>
	{
			if(pinDirection == INPUT)
     796:	41 11       	cpse	r20, r1
     798:	0e c0       	rjmp	.+28     	; 0x7b6 <Dio_init+0x34>
			{
				CLEARE_BIT(DDRA, pinNumber);
     79a:	6a b3       	in	r22, 0x1a	; 26
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	fa 01       	movw	r30, r20
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <Dio_init+0x26>
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	2a 95       	dec	r18
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <Dio_init+0x22>
     7ac:	9f 01       	movw	r18, r30
     7ae:	20 95       	com	r18
     7b0:	26 23       	and	r18, r22
     7b2:	2a bb       	out	0x1a, r18	; 26
     7b4:	08 95       	ret
			}
			else if(pinDirection == OUTPUT)
     7b6:	41 30       	cpi	r20, 0x01	; 1
     7b8:	09 f0       	breq	.+2      	; 0x7bc <Dio_init+0x3a>
     7ba:	71 c0       	rjmp	.+226    	; 0x89e <__stack+0x3f>
			{
				SET_BIT(DDRA, pinNumber);
     7bc:	6a b3       	in	r22, 0x1a	; 26
     7be:	41 e0       	ldi	r20, 0x01	; 1
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	fa 01       	movw	r30, r20
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <Dio_init+0x48>
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	2a 95       	dec	r18
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <Dio_init+0x44>
     7ce:	9f 01       	movw	r18, r30
     7d0:	26 2b       	or	r18, r22
     7d2:	2a bb       	out	0x1a, r18	; 26
     7d4:	08 95       	ret
			}
			else
				retVal = (int)  WRONG_DIR;		
	}
	else if( portNumber == 'B' )
     7d6:	62 34       	cpi	r22, 0x42	; 66
     7d8:	01 f5       	brne	.+64     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
	{
			if(pinDirection == INPUT)
     7da:	41 11       	cpse	r20, r1
     7dc:	0e c0       	rjmp	.+28     	; 0x7fa <Dio_init+0x78>
			{
				CLEARE_BIT(DDRB, pinNumber);
     7de:	67 b3       	in	r22, 0x17	; 23
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	fa 01       	movw	r30, r20
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <Dio_init+0x6a>
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	2a 95       	dec	r18
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <Dio_init+0x66>
     7f0:	9f 01       	movw	r18, r30
     7f2:	20 95       	com	r18
     7f4:	26 23       	and	r18, r22
     7f6:	27 bb       	out	0x17, r18	; 23
     7f8:	08 95       	ret
			}
			else if(pinDirection == OUTPUT)
     7fa:	41 30       	cpi	r20, 0x01	; 1
     7fc:	09 f0       	breq	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	52 c0       	rjmp	.+164    	; 0x8a4 <__stack+0x45>
			{
				SET_BIT(DDRB, pinNumber);
     800:	67 b3       	in	r22, 0x17	; 23
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	fa 01       	movw	r30, r20
     808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	2a 95       	dec	r18
     810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     812:	9f 01       	movw	r18, r30
     814:	26 2b       	or	r18, r22
     816:	27 bb       	out	0x17, r18	; 23
     818:	08 95       	ret
			}
			else
			retVal = (int)  WRONG_DIR;		
	}
	else if( portNumber == 'C' )
     81a:	63 34       	cpi	r22, 0x43	; 67
     81c:	f9 f4       	brne	.+62     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
	{
			if(pinDirection == INPUT)
     81e:	41 11       	cpse	r20, r1
     820:	0e c0       	rjmp	.+28     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
			{
				CLEARE_BIT(DDRC, pinNumber);
     822:	64 b3       	in	r22, 0x14	; 20
     824:	41 e0       	ldi	r20, 0x01	; 1
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	fa 01       	movw	r30, r20
     82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	2a 95       	dec	r18
     832:	e2 f7       	brpl	.-8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     834:	9f 01       	movw	r18, r30
     836:	20 95       	com	r18
     838:	26 23       	and	r18, r22
     83a:	24 bb       	out	0x14, r18	; 20
     83c:	08 95       	ret
			}
			else if(pinDirection == OUTPUT)
     83e:	41 30       	cpi	r20, 0x01	; 1
     840:	a1 f5       	brne	.+104    	; 0x8aa <__stack+0x4b>
			{
				SET_BIT(DDRC, pinNumber);
     842:	64 b3       	in	r22, 0x14	; 20
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	fa 01       	movw	r30, r20
     84a:	02 c0       	rjmp	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	2a 95       	dec	r18
     852:	e2 f7       	brpl	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     854:	9f 01       	movw	r18, r30
     856:	26 2b       	or	r18, r22
     858:	24 bb       	out	0x14, r18	; 20
     85a:	08 95       	ret
			}
			else
			retVal = (int)  WRONG_DIR;		
	}
	else if( portNumber == 'D' )
     85c:	64 34       	cpi	r22, 0x44	; 68
     85e:	41 f5       	brne	.+80     	; 0x8b0 <__stack+0x51>
	{
			if(pinDirection == INPUT)
     860:	41 11       	cpse	r20, r1
     862:	0e c0       	rjmp	.+28     	; 0x880 <__stack+0x21>
			{
				CLEARE_BIT(DDRD, pinNumber);
     864:	61 b3       	in	r22, 0x11	; 17
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	fa 01       	movw	r30, r20
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	2a 95       	dec	r18
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	9f 01       	movw	r18, r30
     878:	20 95       	com	r18
     87a:	26 23       	and	r18, r22
     87c:	21 bb       	out	0x11, r18	; 17
     87e:	08 95       	ret
			}
			else if(pinDirection == OUTPUT)
     880:	41 30       	cpi	r20, 0x01	; 1
     882:	c9 f4       	brne	.+50     	; 0x8b6 <__stack+0x57>
			{
				SET_BIT(DDRD, pinNumber);
     884:	61 b3       	in	r22, 0x11	; 17
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	fa 01       	movw	r30, r20
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	2a 95       	dec	r18
     894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
     896:	9f 01       	movw	r18, r30
     898:	26 2b       	or	r18, r22
     89a:	21 bb       	out	0x11, r18	; 17
     89c:	08 95       	ret
			else if(pinDirection == OUTPUT)
			{
				SET_BIT(DDRA, pinNumber);
			}
			else
				retVal = (int)  WRONG_DIR;		
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	08 95       	ret
			else if(pinDirection == OUTPUT)
			{
				SET_BIT(DDRB, pinNumber);
			}
			else
			retVal = (int)  WRONG_DIR;		
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	08 95       	ret
			else if(pinDirection == OUTPUT)
			{
				SET_BIT(DDRC, pinNumber);
			}
			else
			retVal = (int)  WRONG_DIR;		
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	08 95       	ret
			else
			retVal = (int)  WRONG_DIR;		
	}
	else 
	{
		retVal = (int) WRONG_PORT;
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	08 95       	ret
			else if(pinDirection == OUTPUT)
			{
				SET_BIT(DDRD, pinNumber);
			}
			else
			retVal = (int)  WRONG_DIR;		
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
	else 
	{
		retVal = (int) WRONG_PORT;
	}
	return retVal;
}
     8ba:	08 95       	ret

000008bc <Dio_write>:

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
	if( ( pinNumber >= PORTWIDTH )  )
     8bc:	88 30       	cpi	r24, 0x08	; 8
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <Dio_write+0x6>
     8c0:	96 c0       	rjmp	.+300    	; 0x9ee <Dio_write+0x132>
		retVal = (int) WRONG_PIN;
	}
	else
	{

			if(portNumber == 'A') 
     8c2:	61 34       	cpi	r22, 0x41	; 65
     8c4:	21 f5       	brne	.+72     	; 0x90e <Dio_write+0x52>
			{
				if( value == LOW)
     8c6:	41 11       	cpse	r20, r1
     8c8:	10 c0       	rjmp	.+32     	; 0x8ea <Dio_write+0x2e>
				{
					CLEARE_BIT(PORTA, pinNumber); // write 0 
     8ca:	4b b3       	in	r20, 0x1b	; 27
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	b9 01       	movw	r22, r18
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <Dio_write+0x1c>
     8d4:	66 0f       	add	r22, r22
     8d6:	77 1f       	adc	r23, r23
     8d8:	8a 95       	dec	r24
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <Dio_write+0x18>
     8dc:	cb 01       	movw	r24, r22
     8de:	80 95       	com	r24
     8e0:	84 23       	and	r24, r20
     8e2:	8b bb       	out	0x1b, r24	; 27
	return retVal;
}

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	08 95       	ret
			{
				if( value == LOW)
				{
					CLEARE_BIT(PORTA, pinNumber); // write 0 
				}
				else if( value == HIGH)
     8ea:	41 30       	cpi	r20, 0x01	; 1
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <Dio_write+0x34>
     8ee:	82 c0       	rjmp	.+260    	; 0x9f4 <Dio_write+0x138>
				{
					SET_BIT(PORTA, pinNumber); // write 1 
     8f0:	4b b3       	in	r20, 0x1b	; 27
     8f2:	21 e0       	ldi	r18, 0x01	; 1
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	b9 01       	movw	r22, r18
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <Dio_write+0x42>
     8fa:	66 0f       	add	r22, r22
     8fc:	77 1f       	adc	r23, r23
     8fe:	8a 95       	dec	r24
     900:	e2 f7       	brpl	.-8      	; 0x8fa <Dio_write+0x3e>
     902:	cb 01       	movw	r24, r22
     904:	84 2b       	or	r24, r20
     906:	8b bb       	out	0x1b, r24	; 27
	return retVal;
}

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	08 95       	ret
				}
				else 
					retVal = (int) WRONG_VAL;
			}
		
			else if(portNumber == 'B')
     90e:	62 34       	cpi	r22, 0x42	; 66
     910:	21 f5       	brne	.+72     	; 0x95a <Dio_write+0x9e>
			{
				if( value == LOW)
     912:	41 11       	cpse	r20, r1
     914:	10 c0       	rjmp	.+32     	; 0x936 <Dio_write+0x7a>
				{
					CLEARE_BIT(PORTB, pinNumber); // write 0 
     916:	48 b3       	in	r20, 0x18	; 24
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	b9 01       	movw	r22, r18
     91e:	02 c0       	rjmp	.+4      	; 0x924 <Dio_write+0x68>
     920:	66 0f       	add	r22, r22
     922:	77 1f       	adc	r23, r23
     924:	8a 95       	dec	r24
     926:	e2 f7       	brpl	.-8      	; 0x920 <Dio_write+0x64>
     928:	cb 01       	movw	r24, r22
     92a:	80 95       	com	r24
     92c:	84 23       	and	r24, r20
     92e:	88 bb       	out	0x18, r24	; 24
	return retVal;
}

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
     930:	84 e0       	ldi	r24, 0x04	; 4
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	08 95       	ret
			{
				if( value == LOW)
				{
					CLEARE_BIT(PORTB, pinNumber); // write 0 
				}
				else if( value == HIGH)
     936:	41 30       	cpi	r20, 0x01	; 1
     938:	09 f0       	breq	.+2      	; 0x93c <Dio_write+0x80>
     93a:	5f c0       	rjmp	.+190    	; 0x9fa <Dio_write+0x13e>
				{
					SET_BIT(PORTB, pinNumber); // write 1 
     93c:	48 b3       	in	r20, 0x18	; 24
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	b9 01       	movw	r22, r18
     944:	02 c0       	rjmp	.+4      	; 0x94a <Dio_write+0x8e>
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	8a 95       	dec	r24
     94c:	e2 f7       	brpl	.-8      	; 0x946 <Dio_write+0x8a>
     94e:	cb 01       	movw	r24, r22
     950:	84 2b       	or	r24, r20
     952:	88 bb       	out	0x18, r24	; 24
	return retVal;
}

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	08 95       	ret
				}
				else
					retVal = (int) WRONG_VAL;
			}
		
			else if(portNumber == 'C')
     95a:	63 34       	cpi	r22, 0x43	; 67
     95c:	19 f5       	brne	.+70     	; 0x9a4 <Dio_write+0xe8>
			{
				if( value == LOW)
     95e:	41 11       	cpse	r20, r1
     960:	10 c0       	rjmp	.+32     	; 0x982 <Dio_write+0xc6>
				{
					CLEARE_BIT(PORTC, pinNumber); // write 0 
     962:	45 b3       	in	r20, 0x15	; 21
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	b9 01       	movw	r22, r18
     96a:	02 c0       	rjmp	.+4      	; 0x970 <Dio_write+0xb4>
     96c:	66 0f       	add	r22, r22
     96e:	77 1f       	adc	r23, r23
     970:	8a 95       	dec	r24
     972:	e2 f7       	brpl	.-8      	; 0x96c <Dio_write+0xb0>
     974:	cb 01       	movw	r24, r22
     976:	80 95       	com	r24
     978:	84 23       	and	r24, r20
     97a:	85 bb       	out	0x15, r24	; 21
	return retVal;
}

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	08 95       	ret
			{
				if( value == LOW)
				{
					CLEARE_BIT(PORTC, pinNumber); // write 0 
				}
				else if( value == HIGH)
     982:	41 30       	cpi	r20, 0x01	; 1
     984:	e9 f5       	brne	.+122    	; 0xa00 <Dio_write+0x144>
				{
					SET_BIT(PORTC, pinNumber); // write 1 
     986:	45 b3       	in	r20, 0x15	; 21
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	b9 01       	movw	r22, r18
     98e:	02 c0       	rjmp	.+4      	; 0x994 <Dio_write+0xd8>
     990:	66 0f       	add	r22, r22
     992:	77 1f       	adc	r23, r23
     994:	8a 95       	dec	r24
     996:	e2 f7       	brpl	.-8      	; 0x990 <Dio_write+0xd4>
     998:	cb 01       	movw	r24, r22
     99a:	84 2b       	or	r24, r20
     99c:	85 bb       	out	0x15, r24	; 21
	return retVal;
}

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	08 95       	ret
				}
				else
					retVal = (int) WRONG_VAL;
			}
		
			else if(portNumber == 'D')
     9a4:	64 34       	cpi	r22, 0x44	; 68
     9a6:	79 f5       	brne	.+94     	; 0xa06 <Dio_write+0x14a>
			{
				if( value == LOW)
     9a8:	41 11       	cpse	r20, r1
     9aa:	10 c0       	rjmp	.+32     	; 0x9cc <Dio_write+0x110>
				{
					CLEARE_BIT(PORTD, pinNumber); // write 0  
     9ac:	42 b3       	in	r20, 0x12	; 18
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	b9 01       	movw	r22, r18
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <Dio_write+0xfe>
     9b6:	66 0f       	add	r22, r22
     9b8:	77 1f       	adc	r23, r23
     9ba:	8a 95       	dec	r24
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <Dio_write+0xfa>
     9be:	cb 01       	movw	r24, r22
     9c0:	80 95       	com	r24
     9c2:	84 23       	and	r24, r20
     9c4:	82 bb       	out	0x12, r24	; 18
	return retVal;
}

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
     9c6:	84 e0       	ldi	r24, 0x04	; 4
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	08 95       	ret
			{
				if( value == LOW)
				{
					CLEARE_BIT(PORTD, pinNumber); // write 0  
				}
				else if( value == HIGH)
     9cc:	41 30       	cpi	r20, 0x01	; 1
     9ce:	f1 f4       	brne	.+60     	; 0xa0c <Dio_write+0x150>
				{
					SET_BIT(PORTD, pinNumber); // write 1  
     9d0:	42 b3       	in	r20, 0x12	; 18
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	b9 01       	movw	r22, r18
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <Dio_write+0x122>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	8a 95       	dec	r24
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <Dio_write+0x11e>
     9e2:	cb 01       	movw	r24, r22
     9e4:	84 2b       	or	r24, r20
     9e6:	82 bb       	out	0x12, r24	; 18
	return retVal;
}

int Dio_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	int retVal = (int) WRITE_OK;
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	08 95       	ret
	if( ( pinNumber >= PORTWIDTH )  )
	{
		retVal = (int) WRONG_PIN;
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	08 95       	ret
				else if( value == HIGH)
				{
					SET_BIT(PORTA, pinNumber); // write 1 
				}
				else 
					retVal = (int) WRONG_VAL;
     9f4:	85 e0       	ldi	r24, 0x05	; 5
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	08 95       	ret
				else if( value == HIGH)
				{
					SET_BIT(PORTB, pinNumber); // write 1 
				}
				else
					retVal = (int) WRONG_VAL;
     9fa:	85 e0       	ldi	r24, 0x05	; 5
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	08 95       	ret
				else if( value == HIGH)
				{
					SET_BIT(PORTC, pinNumber); // write 1 
				}
				else
					retVal = (int) WRONG_VAL;
     a00:	85 e0       	ldi	r24, 0x05	; 5
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	08 95       	ret
				else
					retVal = (int) WRONG_VAL;
			}
			else
			{
				retVal = (int) WRONG_PORT;	
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	08 95       	ret
				else if( value == HIGH)
				{
					SET_BIT(PORTD, pinNumber); // write 1  
				}
				else
					retVal = (int) WRONG_VAL;
     a0c:	85 e0       	ldi	r24, 0x05	; 5
     a0e:	90 e0       	ldi	r25, 0x00	; 0
				retVal = (int) WRONG_PORT;	
			}
		
	}
	return retVal;
}
     a10:	08 95       	ret

00000a12 <interrupt_enable>:
#include "EXTI.h"


void interrupt_enable(void)
{
	SET_BIT(SREG, GENERAL_INT_ENABLE);
     a12:	8f b7       	in	r24, 0x3f	; 63
     a14:	80 68       	ori	r24, 0x80	; 128
     a16:	8f bf       	out	0x3f, r24	; 63
     a18:	08 95       	ret

00000a1a <extInterrupt_0_init>:
}


void extInterrupt_0_init(void)
{
 	SET_BIT(SFIOR, PUD);
     a1a:	80 b7       	in	r24, 0x30	; 48
     a1c:	84 60       	ori	r24, 0x04	; 4
     a1e:	80 bf       	out	0x30, r24	; 48
 	SET_BIT(GICR, EXTERNAL_INTERRUPT_REQUEST_0);
     a20:	8b b7       	in	r24, 0x3b	; 59
     a22:	80 64       	ori	r24, 0x40	; 64
     a24:	8b bf       	out	0x3b, r24	; 59
 	CLEARE_BIT(MCUCR, INTERRUPT_SENSE_CONTROL_0_BIT_0);
     a26:	85 b7       	in	r24, 0x35	; 53
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	85 bf       	out	0x35, r24	; 53
 	SET_BIT(MCUCR, INTERRUPT_SENSE_CONTROL_0_BIT_1);
     a2c:	85 b7       	in	r24, 0x35	; 53
     a2e:	82 60       	ori	r24, 0x02	; 2
     a30:	85 bf       	out	0x35, r24	; 53
     a32:	08 95       	ret

00000a34 <extInterrupt_1_init>:
}


void extInterrupt_1_init(void)
{
 	SET_BIT(SFIOR, PUD);
     a34:	80 b7       	in	r24, 0x30	; 48
     a36:	84 60       	ori	r24, 0x04	; 4
     a38:	80 bf       	out	0x30, r24	; 48
 	SET_BIT(GICR, EXTERNAL_INTERRUPT_REQUEST_1);
     a3a:	8b b7       	in	r24, 0x3b	; 59
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	8b bf       	out	0x3b, r24	; 59
 	CLEARE_BIT(MCUCR, INTERRUPT_SENSE_CONTROL_1_BIT_0);
     a40:	85 b7       	in	r24, 0x35	; 53
     a42:	8b 7f       	andi	r24, 0xFB	; 251
     a44:	85 bf       	out	0x35, r24	; 53
 	SET_BIT(MCUCR, INTERRUPT_SENSE_CONTROL_1_BIT_1);	
     a46:	85 b7       	in	r24, 0x35	; 53
     a48:	88 60       	ori	r24, 0x08	; 8
     a4a:	85 bf       	out	0x35, r24	; 53
     a4c:	08 95       	ret

00000a4e <timer0_init>:
/*Counts to reach one second without prescaler*/
uint32_t OVFs = 0;
uint8_t timer_Initial = 0;
void timer0_init(void)
{
	SREG |=(1<<7);                              //Enable the global interrupt enable bit.
     a4e:	8f b7       	in	r24, 0x3f	; 63
     a50:	80 68       	ori	r24, 0x80	; 128
     a52:	8f bf       	out	0x3f, r24	; 63
	/*initial value for the timer/counter register.*/
	/* select the normal mode for the timer, timer is not start yet.*/
	TCCR0 &= ~(1<<WGM00);
     a54:	83 b7       	in	r24, 0x33	; 51
     a56:	8f 7b       	andi	r24, 0xBF	; 191
     a58:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<WGM01); 
     a5a:	83 b7       	in	r24, 0x33	; 51
     a5c:	87 7f       	andi	r24, 0xF7	; 247
     a5e:	83 bf       	out	0x33, r24	; 51
	/*must be set for the non_PWM mode*/
	TCCR0 |= (1<<FOC0);
     a60:	83 b7       	in	r24, 0x33	; 51
     a62:	80 68       	ori	r24, 0x80	; 128
     a64:	83 bf       	out	0x33, r24	; 51
	/* Enable the interrupt for timer0 overflow.*/
	TIMSK |=(1<<TOIE0);
     a66:	89 b7       	in	r24, 0x39	; 57
     a68:	81 60       	ori	r24, 0x01	; 1
     a6a:	89 bf       	out	0x39, r24	; 57
     a6c:	08 95       	ret

00000a6e <timer_start>:
	timer_start(1024);
}

void timer_start(uint16_t prescaler)
{
	if(prescaler == 1)
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	91 05       	cpc	r25, r1
     a72:	51 f4       	brne	.+20     	; 0xa88 <timer_start+0x1a>
	{
		TCCR0 &=~(1<<CS01);
     a74:	83 b7       	in	r24, 0x33	; 51
     a76:	8d 7f       	andi	r24, 0xFD	; 253
     a78:	83 bf       	out	0x33, r24	; 51
		TCCR0 &=~(1<<CS02);
     a7a:	83 b7       	in	r24, 0x33	; 51
     a7c:	8b 7f       	andi	r24, 0xFB	; 251
     a7e:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS00);		
     a80:	83 b7       	in	r24, 0x33	; 51
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	83 bf       	out	0x33, r24	; 51
     a86:	08 95       	ret
	}
	else if(prescaler == 8)
     a88:	88 30       	cpi	r24, 0x08	; 8
     a8a:	91 05       	cpc	r25, r1
     a8c:	51 f4       	brne	.+20     	; 0xaa2 <timer_start+0x34>
	{
		TCCR0 &=~(1<<CS00);
     a8e:	83 b7       	in	r24, 0x33	; 51
     a90:	8e 7f       	andi	r24, 0xFE	; 254
     a92:	83 bf       	out	0x33, r24	; 51
		TCCR0 &=~(1<<CS02);
     a94:	83 b7       	in	r24, 0x33	; 51
     a96:	8b 7f       	andi	r24, 0xFB	; 251
     a98:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS01);		
     a9a:	83 b7       	in	r24, 0x33	; 51
     a9c:	82 60       	ori	r24, 0x02	; 2
     a9e:	83 bf       	out	0x33, r24	; 51
     aa0:	08 95       	ret
	}
	else if(prescaler == 64)
     aa2:	80 34       	cpi	r24, 0x40	; 64
     aa4:	91 05       	cpc	r25, r1
     aa6:	51 f4       	brne	.+20     	; 0xabc <timer_start+0x4e>
	{
		TCCR0 &=~(1<<CS02);
     aa8:	83 b7       	in	r24, 0x33	; 51
     aaa:	8b 7f       	andi	r24, 0xFB	; 251
     aac:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS01);
     aae:	83 b7       	in	r24, 0x33	; 51
     ab0:	82 60       	ori	r24, 0x02	; 2
     ab2:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS00);		
     ab4:	83 b7       	in	r24, 0x33	; 51
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	83 bf       	out	0x33, r24	; 51
     aba:	08 95       	ret
	}
	else if(prescaler == 256)
     abc:	81 15       	cp	r24, r1
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	92 07       	cpc	r25, r18
     ac2:	51 f4       	brne	.+20     	; 0xad8 <timer_start+0x6a>
	{
		TCCR0 &=~(1<<CS00);
     ac4:	83 b7       	in	r24, 0x33	; 51
     ac6:	8e 7f       	andi	r24, 0xFE	; 254
     ac8:	83 bf       	out	0x33, r24	; 51
		TCCR0 &=~(1<<CS01);
     aca:	83 b7       	in	r24, 0x33	; 51
     acc:	8d 7f       	andi	r24, 0xFD	; 253
     ace:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS02);		
     ad0:	83 b7       	in	r24, 0x33	; 51
     ad2:	84 60       	ori	r24, 0x04	; 4
     ad4:	83 bf       	out	0x33, r24	; 51
     ad6:	08 95       	ret
	}
	else if(prescaler == 1024)
     ad8:	81 15       	cp	r24, r1
     ada:	94 40       	sbci	r25, 0x04	; 4
     adc:	51 f4       	brne	.+20     	; 0xaf2 <timer_start+0x84>
	{
		TCCR0 &=~(1<<CS01);
     ade:	83 b7       	in	r24, 0x33	; 51
     ae0:	8d 7f       	andi	r24, 0xFD	; 253
     ae2:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS00);
     ae4:	83 b7       	in	r24, 0x33	; 51
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS02);		
     aea:	83 b7       	in	r24, 0x33	; 51
     aec:	84 60       	ori	r24, 0x04	; 4
     aee:	83 bf       	out	0x33, r24	; 51
     af0:	08 95       	ret
	}
	else
	{
		TCCR0 &=~(1<<CS01);
     af2:	83 b7       	in	r24, 0x33	; 51
     af4:	8d 7f       	andi	r24, 0xFD	; 253
     af6:	83 bf       	out	0x33, r24	; 51
		TCCR0 &=~(1<<CS02);
     af8:	83 b7       	in	r24, 0x33	; 51
     afa:	8b 7f       	andi	r24, 0xFB	; 251
     afc:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS00);
     afe:	83 b7       	in	r24, 0x33	; 51
     b00:	81 60       	ori	r24, 0x01	; 1
     b02:	83 bf       	out	0x33, r24	; 51
     b04:	08 95       	ret

00000b06 <timer_delay>:
	TIMSK |=(1<<TOIE0);
}


void timer_delay(double interval)
{
     b06:	8f 92       	push	r8
     b08:	9f 92       	push	r9
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
	TCCR0 =0x00;
     b16:	13 be       	out	0x33, r1	; 51
	double maxDelay = 0.032768;
	double delay = ( interval /1000.0f);
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	4a e7       	ldi	r20, 0x7A	; 122
     b1e:	54 e4       	ldi	r21, 0x44	; 68
     b20:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
	if( (delay < maxDelay) == TRUE )
     b28:	2d eb       	ldi	r18, 0xBD	; 189
     b2a:	37 e3       	ldi	r19, 0x37	; 55
     b2c:	46 e0       	ldi	r20, 0x06	; 6
     b2e:	5d e3       	ldi	r21, 0x3D	; 61
     b30:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
     b34:	88 23       	and	r24, r24
     b36:	94 f4       	brge	.+36     	; 0xb5c <timer_delay+0x56>
	{
		TCNT0 = (uint8_t) (  ( maxDelay - delay ) / 0.000128f );
     b38:	a7 01       	movw	r20, r14
     b3a:	96 01       	movw	r18, r12
     b3c:	6d eb       	ldi	r22, 0xBD	; 189
     b3e:	77 e3       	ldi	r23, 0x37	; 55
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	9d e3       	ldi	r25, 0x3D	; 61
     b44:	0e 94 03 06 	call	0xc06	; 0xc06 <__subsf3>
     b48:	2d eb       	ldi	r18, 0xBD	; 189
     b4a:	37 e3       	ldi	r19, 0x37	; 55
     b4c:	46 e0       	ldi	r20, 0x06	; 6
     b4e:	59 e3       	ldi	r21, 0x39	; 57
     b50:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     b54:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     b58:	62 bf       	out	0x32, r22	; 50
     b5a:	3e c0       	rjmp	.+124    	; 0xbd8 <timer_delay+0xd2>
	}
	else if(  (delay  ==  maxDelay) == TRUE )
     b5c:	2d eb       	ldi	r18, 0xBD	; 189
     b5e:	37 e3       	ldi	r19, 0x37	; 55
     b60:	46 e0       	ldi	r20, 0x06	; 6
     b62:	5d e3       	ldi	r21, 0x3D	; 61
     b64:	c7 01       	movw	r24, r14
     b66:	b6 01       	movw	r22, r12
     b68:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
     b6c:	81 11       	cpse	r24, r1
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <timer_delay+0x6e>
	{
		TCNT0 = 0x00;
     b70:	12 be       	out	0x32, r1	; 50
     b72:	32 c0       	rjmp	.+100    	; 0xbd8 <timer_delay+0xd2>
	}
	else
	{
		OVFs = ceil( delay / maxDelay );
     b74:	2d eb       	ldi	r18, 0xBD	; 189
     b76:	37 e3       	ldi	r19, 0x37	; 55
     b78:	46 e0       	ldi	r20, 0x06	; 6
     b7a:	5d e3       	ldi	r21, 0x3D	; 61
     b7c:	c7 01       	movw	r24, r14
     b7e:	b6 01       	movw	r22, r12
     b80:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     b84:	0e 94 70 06 	call	0xce0	; 0xce0 <ceil>
     b88:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     b8c:	4b 01       	movw	r8, r22
     b8e:	5c 01       	movw	r10, r24
     b90:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <OVFs+0x1>
     b94:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <OVFs>
		TCNT0 = (uint8_t) ( MAX_COUNTS - ( ( delay / 0.000128f ) / OVFs )  );
     b98:	2d eb       	ldi	r18, 0xBD	; 189
     b9a:	37 e3       	ldi	r19, 0x37	; 55
     b9c:	46 e0       	ldi	r20, 0x06	; 6
     b9e:	59 e3       	ldi	r21, 0x39	; 57
     ba0:	c7 01       	movw	r24, r14
     ba2:	b6 01       	movw	r22, r12
     ba4:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     ba8:	6b 01       	movw	r12, r22
     baa:	7c 01       	movw	r14, r24
     bac:	b4 01       	movw	r22, r8
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatunsisf>
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
     bba:	c7 01       	movw	r24, r14
     bbc:	b6 01       	movw	r22, r12
     bbe:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	8f e7       	ldi	r24, 0x7F	; 127
     bcc:	93 e4       	ldi	r25, 0x43	; 67
     bce:	0e 94 03 06 	call	0xc06	; 0xc06 <__subsf3>
     bd2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fixunssfsi>
     bd6:	62 bf       	out	0x32, r22	; 50
	}
   /* while (OVFs != g_tick);
    g_tick = 0;*/
	timer_start(1024);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	94 e0       	ldi	r25, 0x04	; 4
     bdc:	0e 94 37 05 	call	0xa6e	; 0xa6e <timer_start>
}
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	08 95       	ret

00000bf2 <timer_stop>:
}

void timer_stop(void)
{
	/* Stop the timer by clearing the prescaler*/
	TCCR0 &=~(1<<CS00);
     bf2:	83 b7       	in	r24, 0x33	; 51
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	83 bf       	out	0x33, r24	; 51
	TCCR0 &=~(1<<CS01);
     bf8:	83 b7       	in	r24, 0x33	; 51
     bfa:	8d 7f       	andi	r24, 0xFD	; 253
     bfc:	83 bf       	out	0x33, r24	; 51
	TCCR0 &=~(1<<CS02);
     bfe:	83 b7       	in	r24, 0x33	; 51
     c00:	8b 7f       	andi	r24, 0xFB	; 251
     c02:	83 bf       	out	0x33, r24	; 51
     c04:	08 95       	ret

00000c06 <__subsf3>:
     c06:	50 58       	subi	r21, 0x80	; 128

00000c08 <__addsf3>:
     c08:	bb 27       	eor	r27, r27
     c0a:	aa 27       	eor	r26, r26
     c0c:	0e 94 1b 06 	call	0xc36	; 0xc36 <__addsf3x>
     c10:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_round>
     c14:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fp_pscA>
     c18:	38 f0       	brcs	.+14     	; 0xc28 <__addsf3+0x20>
     c1a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_pscB>
     c1e:	20 f0       	brcs	.+8      	; 0xc28 <__addsf3+0x20>
     c20:	39 f4       	brne	.+14     	; 0xc30 <__addsf3+0x28>
     c22:	9f 3f       	cpi	r25, 0xFF	; 255
     c24:	19 f4       	brne	.+6      	; 0xc2c <__addsf3+0x24>
     c26:	26 f4       	brtc	.+8      	; 0xc30 <__addsf3+0x28>
     c28:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_nan>
     c2c:	0e f4       	brtc	.+2      	; 0xc30 <__addsf3+0x28>
     c2e:	e0 95       	com	r30
     c30:	e7 fb       	bst	r30, 7
     c32:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_inf>

00000c36 <__addsf3x>:
     c36:	e9 2f       	mov	r30, r25
     c38:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_split3>
     c3c:	58 f3       	brcs	.-42     	; 0xc14 <__addsf3+0xc>
     c3e:	ba 17       	cp	r27, r26
     c40:	62 07       	cpc	r22, r18
     c42:	73 07       	cpc	r23, r19
     c44:	84 07       	cpc	r24, r20
     c46:	95 07       	cpc	r25, r21
     c48:	20 f0       	brcs	.+8      	; 0xc52 <__addsf3x+0x1c>
     c4a:	79 f4       	brne	.+30     	; 0xc6a <__addsf3x+0x34>
     c4c:	a6 f5       	brtc	.+104    	; 0xcb6 <__addsf3x+0x80>
     c4e:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__fp_zero>
     c52:	0e f4       	brtc	.+2      	; 0xc56 <__addsf3x+0x20>
     c54:	e0 95       	com	r30
     c56:	0b 2e       	mov	r0, r27
     c58:	ba 2f       	mov	r27, r26
     c5a:	a0 2d       	mov	r26, r0
     c5c:	0b 01       	movw	r0, r22
     c5e:	b9 01       	movw	r22, r18
     c60:	90 01       	movw	r18, r0
     c62:	0c 01       	movw	r0, r24
     c64:	ca 01       	movw	r24, r20
     c66:	a0 01       	movw	r20, r0
     c68:	11 24       	eor	r1, r1
     c6a:	ff 27       	eor	r31, r31
     c6c:	59 1b       	sub	r21, r25
     c6e:	99 f0       	breq	.+38     	; 0xc96 <__addsf3x+0x60>
     c70:	59 3f       	cpi	r21, 0xF9	; 249
     c72:	50 f4       	brcc	.+20     	; 0xc88 <__addsf3x+0x52>
     c74:	50 3e       	cpi	r21, 0xE0	; 224
     c76:	68 f1       	brcs	.+90     	; 0xcd2 <__addsf3x+0x9c>
     c78:	1a 16       	cp	r1, r26
     c7a:	f0 40       	sbci	r31, 0x00	; 0
     c7c:	a2 2f       	mov	r26, r18
     c7e:	23 2f       	mov	r18, r19
     c80:	34 2f       	mov	r19, r20
     c82:	44 27       	eor	r20, r20
     c84:	58 5f       	subi	r21, 0xF8	; 248
     c86:	f3 cf       	rjmp	.-26     	; 0xc6e <__addsf3x+0x38>
     c88:	46 95       	lsr	r20
     c8a:	37 95       	ror	r19
     c8c:	27 95       	ror	r18
     c8e:	a7 95       	ror	r26
     c90:	f0 40       	sbci	r31, 0x00	; 0
     c92:	53 95       	inc	r21
     c94:	c9 f7       	brne	.-14     	; 0xc88 <__addsf3x+0x52>
     c96:	7e f4       	brtc	.+30     	; 0xcb6 <__addsf3x+0x80>
     c98:	1f 16       	cp	r1, r31
     c9a:	ba 0b       	sbc	r27, r26
     c9c:	62 0b       	sbc	r22, r18
     c9e:	73 0b       	sbc	r23, r19
     ca0:	84 0b       	sbc	r24, r20
     ca2:	ba f0       	brmi	.+46     	; 0xcd2 <__addsf3x+0x9c>
     ca4:	91 50       	subi	r25, 0x01	; 1
     ca6:	a1 f0       	breq	.+40     	; 0xcd0 <__addsf3x+0x9a>
     ca8:	ff 0f       	add	r31, r31
     caa:	bb 1f       	adc	r27, r27
     cac:	66 1f       	adc	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	c2 f7       	brpl	.-16     	; 0xca4 <__addsf3x+0x6e>
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <__addsf3x+0x9c>
     cb6:	ba 0f       	add	r27, r26
     cb8:	62 1f       	adc	r22, r18
     cba:	73 1f       	adc	r23, r19
     cbc:	84 1f       	adc	r24, r20
     cbe:	48 f4       	brcc	.+18     	; 0xcd2 <__addsf3x+0x9c>
     cc0:	87 95       	ror	r24
     cc2:	77 95       	ror	r23
     cc4:	67 95       	ror	r22
     cc6:	b7 95       	ror	r27
     cc8:	f7 95       	ror	r31
     cca:	9e 3f       	cpi	r25, 0xFE	; 254
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <__addsf3x+0x9a>
     cce:	b0 cf       	rjmp	.-160    	; 0xc30 <__addsf3+0x28>
     cd0:	93 95       	inc	r25
     cd2:	88 0f       	add	r24, r24
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <__addsf3x+0xa2>
     cd6:	99 27       	eor	r25, r25
     cd8:	ee 0f       	add	r30, r30
     cda:	97 95       	ror	r25
     cdc:	87 95       	ror	r24
     cde:	08 95       	ret

00000ce0 <ceil>:
     ce0:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_trunc>
     ce4:	90 f0       	brcs	.+36     	; 0xd0a <ceil+0x2a>
     ce6:	9f 37       	cpi	r25, 0x7F	; 127
     ce8:	48 f4       	brcc	.+18     	; 0xcfc <ceil+0x1c>
     cea:	91 11       	cpse	r25, r1
     cec:	16 f4       	brtc	.+4      	; 0xcf2 <ceil+0x12>
     cee:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_szero>
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	80 e8       	ldi	r24, 0x80	; 128
     cf8:	9f e3       	ldi	r25, 0x3F	; 63
     cfa:	08 95       	ret
     cfc:	26 f0       	brts	.+8      	; 0xd06 <ceil+0x26>
     cfe:	1b 16       	cp	r1, r27
     d00:	61 1d       	adc	r22, r1
     d02:	71 1d       	adc	r23, r1
     d04:	81 1d       	adc	r24, r1
     d06:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__fp_mintl>
     d0a:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_mpack>

00000d0e <__cmpsf2>:
     d0e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_cmp>
     d12:	08 f4       	brcc	.+2      	; 0xd16 <__cmpsf2+0x8>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	08 95       	ret

00000d18 <__divsf3>:
     d18:	0e 94 a0 06 	call	0xd40	; 0xd40 <__divsf3x>
     d1c:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_round>
     d20:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_pscB>
     d24:	58 f0       	brcs	.+22     	; 0xd3c <__divsf3+0x24>
     d26:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fp_pscA>
     d2a:	40 f0       	brcs	.+16     	; 0xd3c <__divsf3+0x24>
     d2c:	29 f4       	brne	.+10     	; 0xd38 <__divsf3+0x20>
     d2e:	5f 3f       	cpi	r21, 0xFF	; 255
     d30:	29 f0       	breq	.+10     	; 0xd3c <__divsf3+0x24>
     d32:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_inf>
     d36:	51 11       	cpse	r21, r1
     d38:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_szero>
     d3c:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_nan>

00000d40 <__divsf3x>:
     d40:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_split3>
     d44:	68 f3       	brcs	.-38     	; 0xd20 <__divsf3+0x8>

00000d46 <__divsf3_pse>:
     d46:	99 23       	and	r25, r25
     d48:	b1 f3       	breq	.-20     	; 0xd36 <__divsf3+0x1e>
     d4a:	55 23       	and	r21, r21
     d4c:	91 f3       	breq	.-28     	; 0xd32 <__divsf3+0x1a>
     d4e:	95 1b       	sub	r25, r21
     d50:	55 0b       	sbc	r21, r21
     d52:	bb 27       	eor	r27, r27
     d54:	aa 27       	eor	r26, r26
     d56:	62 17       	cp	r22, r18
     d58:	73 07       	cpc	r23, r19
     d5a:	84 07       	cpc	r24, r20
     d5c:	38 f0       	brcs	.+14     	; 0xd6c <__divsf3_pse+0x26>
     d5e:	9f 5f       	subi	r25, 0xFF	; 255
     d60:	5f 4f       	sbci	r21, 0xFF	; 255
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	44 1f       	adc	r20, r20
     d68:	aa 1f       	adc	r26, r26
     d6a:	a9 f3       	breq	.-22     	; 0xd56 <__divsf3_pse+0x10>
     d6c:	35 d0       	rcall	.+106    	; 0xdd8 <__divsf3_pse+0x92>
     d6e:	0e 2e       	mov	r0, r30
     d70:	3a f0       	brmi	.+14     	; 0xd80 <__divsf3_pse+0x3a>
     d72:	e0 e8       	ldi	r30, 0x80	; 128
     d74:	32 d0       	rcall	.+100    	; 0xdda <__divsf3_pse+0x94>
     d76:	91 50       	subi	r25, 0x01	; 1
     d78:	50 40       	sbci	r21, 0x00	; 0
     d7a:	e6 95       	lsr	r30
     d7c:	00 1c       	adc	r0, r0
     d7e:	ca f7       	brpl	.-14     	; 0xd72 <__divsf3_pse+0x2c>
     d80:	2b d0       	rcall	.+86     	; 0xdd8 <__divsf3_pse+0x92>
     d82:	fe 2f       	mov	r31, r30
     d84:	29 d0       	rcall	.+82     	; 0xdd8 <__divsf3_pse+0x92>
     d86:	66 0f       	add	r22, r22
     d88:	77 1f       	adc	r23, r23
     d8a:	88 1f       	adc	r24, r24
     d8c:	bb 1f       	adc	r27, r27
     d8e:	26 17       	cp	r18, r22
     d90:	37 07       	cpc	r19, r23
     d92:	48 07       	cpc	r20, r24
     d94:	ab 07       	cpc	r26, r27
     d96:	b0 e8       	ldi	r27, 0x80	; 128
     d98:	09 f0       	breq	.+2      	; 0xd9c <__divsf3_pse+0x56>
     d9a:	bb 0b       	sbc	r27, r27
     d9c:	80 2d       	mov	r24, r0
     d9e:	bf 01       	movw	r22, r30
     da0:	ff 27       	eor	r31, r31
     da2:	93 58       	subi	r25, 0x83	; 131
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	3a f0       	brmi	.+14     	; 0xdb6 <__divsf3_pse+0x70>
     da8:	9e 3f       	cpi	r25, 0xFE	; 254
     daa:	51 05       	cpc	r21, r1
     dac:	78 f0       	brcs	.+30     	; 0xdcc <__divsf3_pse+0x86>
     dae:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_inf>
     db2:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_szero>
     db6:	5f 3f       	cpi	r21, 0xFF	; 255
     db8:	e4 f3       	brlt	.-8      	; 0xdb2 <__divsf3_pse+0x6c>
     dba:	98 3e       	cpi	r25, 0xE8	; 232
     dbc:	d4 f3       	brlt	.-12     	; 0xdb2 <__divsf3_pse+0x6c>
     dbe:	86 95       	lsr	r24
     dc0:	77 95       	ror	r23
     dc2:	67 95       	ror	r22
     dc4:	b7 95       	ror	r27
     dc6:	f7 95       	ror	r31
     dc8:	9f 5f       	subi	r25, 0xFF	; 255
     dca:	c9 f7       	brne	.-14     	; 0xdbe <__divsf3_pse+0x78>
     dcc:	88 0f       	add	r24, r24
     dce:	91 1d       	adc	r25, r1
     dd0:	96 95       	lsr	r25
     dd2:	87 95       	ror	r24
     dd4:	97 f9       	bld	r25, 7
     dd6:	08 95       	ret
     dd8:	e1 e0       	ldi	r30, 0x01	; 1
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	88 1f       	adc	r24, r24
     de0:	bb 1f       	adc	r27, r27
     de2:	62 17       	cp	r22, r18
     de4:	73 07       	cpc	r23, r19
     de6:	84 07       	cpc	r24, r20
     de8:	ba 07       	cpc	r27, r26
     dea:	20 f0       	brcs	.+8      	; 0xdf4 <__divsf3_pse+0xae>
     dec:	62 1b       	sub	r22, r18
     dee:	73 0b       	sbc	r23, r19
     df0:	84 0b       	sbc	r24, r20
     df2:	ba 0b       	sbc	r27, r26
     df4:	ee 1f       	adc	r30, r30
     df6:	88 f7       	brcc	.-30     	; 0xdda <__divsf3_pse+0x94>
     df8:	e0 95       	com	r30
     dfa:	08 95       	ret

00000dfc <__fixunssfsi>:
     dfc:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_splitA>
     e00:	88 f0       	brcs	.+34     	; 0xe24 <__fixunssfsi+0x28>
     e02:	9f 57       	subi	r25, 0x7F	; 127
     e04:	98 f0       	brcs	.+38     	; 0xe2c <__fixunssfsi+0x30>
     e06:	b9 2f       	mov	r27, r25
     e08:	99 27       	eor	r25, r25
     e0a:	b7 51       	subi	r27, 0x17	; 23
     e0c:	b0 f0       	brcs	.+44     	; 0xe3a <__fixunssfsi+0x3e>
     e0e:	e1 f0       	breq	.+56     	; 0xe48 <__fixunssfsi+0x4c>
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	1a f0       	brmi	.+6      	; 0xe20 <__fixunssfsi+0x24>
     e1a:	ba 95       	dec	r27
     e1c:	c9 f7       	brne	.-14     	; 0xe10 <__fixunssfsi+0x14>
     e1e:	14 c0       	rjmp	.+40     	; 0xe48 <__fixunssfsi+0x4c>
     e20:	b1 30       	cpi	r27, 0x01	; 1
     e22:	91 f0       	breq	.+36     	; 0xe48 <__fixunssfsi+0x4c>
     e24:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_zero>
     e28:	b1 e0       	ldi	r27, 0x01	; 1
     e2a:	08 95       	ret
     e2c:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__fp_zero>
     e30:	67 2f       	mov	r22, r23
     e32:	78 2f       	mov	r23, r24
     e34:	88 27       	eor	r24, r24
     e36:	b8 5f       	subi	r27, 0xF8	; 248
     e38:	39 f0       	breq	.+14     	; 0xe48 <__fixunssfsi+0x4c>
     e3a:	b9 3f       	cpi	r27, 0xF9	; 249
     e3c:	cc f3       	brlt	.-14     	; 0xe30 <__fixunssfsi+0x34>
     e3e:	86 95       	lsr	r24
     e40:	77 95       	ror	r23
     e42:	67 95       	ror	r22
     e44:	b3 95       	inc	r27
     e46:	d9 f7       	brne	.-10     	; 0xe3e <__fixunssfsi+0x42>
     e48:	3e f4       	brtc	.+14     	; 0xe58 <__fixunssfsi+0x5c>
     e4a:	90 95       	com	r25
     e4c:	80 95       	com	r24
     e4e:	70 95       	com	r23
     e50:	61 95       	neg	r22
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	8f 4f       	sbci	r24, 0xFF	; 255
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	08 95       	ret

00000e5a <__floatunsisf>:
     e5a:	e8 94       	clt
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <__floatsisf+0x12>

00000e5e <__floatsisf>:
     e5e:	97 fb       	bst	r25, 7
     e60:	3e f4       	brtc	.+14     	; 0xe70 <__floatsisf+0x12>
     e62:	90 95       	com	r25
     e64:	80 95       	com	r24
     e66:	70 95       	com	r23
     e68:	61 95       	neg	r22
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	8f 4f       	sbci	r24, 0xFF	; 255
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	99 23       	and	r25, r25
     e72:	a9 f0       	breq	.+42     	; 0xe9e <__floatsisf+0x40>
     e74:	f9 2f       	mov	r31, r25
     e76:	96 e9       	ldi	r25, 0x96	; 150
     e78:	bb 27       	eor	r27, r27
     e7a:	93 95       	inc	r25
     e7c:	f6 95       	lsr	r31
     e7e:	87 95       	ror	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b7 95       	ror	r27
     e86:	f1 11       	cpse	r31, r1
     e88:	f8 cf       	rjmp	.-16     	; 0xe7a <__floatsisf+0x1c>
     e8a:	fa f4       	brpl	.+62     	; 0xeca <__floatsisf+0x6c>
     e8c:	bb 0f       	add	r27, r27
     e8e:	11 f4       	brne	.+4      	; 0xe94 <__floatsisf+0x36>
     e90:	60 ff       	sbrs	r22, 0
     e92:	1b c0       	rjmp	.+54     	; 0xeca <__floatsisf+0x6c>
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	16 c0       	rjmp	.+44     	; 0xeca <__floatsisf+0x6c>
     e9e:	88 23       	and	r24, r24
     ea0:	11 f0       	breq	.+4      	; 0xea6 <__floatsisf+0x48>
     ea2:	96 e9       	ldi	r25, 0x96	; 150
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <__floatsisf+0x6a>
     ea6:	77 23       	and	r23, r23
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <__floatsisf+0x54>
     eaa:	9e e8       	ldi	r25, 0x8E	; 142
     eac:	87 2f       	mov	r24, r23
     eae:	76 2f       	mov	r23, r22
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <__floatsisf+0x5e>
     eb2:	66 23       	and	r22, r22
     eb4:	71 f0       	breq	.+28     	; 0xed2 <__floatsisf+0x74>
     eb6:	96 e8       	ldi	r25, 0x86	; 134
     eb8:	86 2f       	mov	r24, r22
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	2a f0       	brmi	.+10     	; 0xeca <__floatsisf+0x6c>
     ec0:	9a 95       	dec	r25
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	da f7       	brpl	.-10     	; 0xec0 <__floatsisf+0x62>
     eca:	88 0f       	add	r24, r24
     ecc:	96 95       	lsr	r25
     ece:	87 95       	ror	r24
     ed0:	97 f9       	bld	r25, 7
     ed2:	08 95       	ret

00000ed4 <__fp_cmp>:
     ed4:	99 0f       	add	r25, r25
     ed6:	00 08       	sbc	r0, r0
     ed8:	55 0f       	add	r21, r21
     eda:	aa 0b       	sbc	r26, r26
     edc:	e0 e8       	ldi	r30, 0x80	; 128
     ede:	fe ef       	ldi	r31, 0xFE	; 254
     ee0:	16 16       	cp	r1, r22
     ee2:	17 06       	cpc	r1, r23
     ee4:	e8 07       	cpc	r30, r24
     ee6:	f9 07       	cpc	r31, r25
     ee8:	c0 f0       	brcs	.+48     	; 0xf1a <__fp_cmp+0x46>
     eea:	12 16       	cp	r1, r18
     eec:	13 06       	cpc	r1, r19
     eee:	e4 07       	cpc	r30, r20
     ef0:	f5 07       	cpc	r31, r21
     ef2:	98 f0       	brcs	.+38     	; 0xf1a <__fp_cmp+0x46>
     ef4:	62 1b       	sub	r22, r18
     ef6:	73 0b       	sbc	r23, r19
     ef8:	84 0b       	sbc	r24, r20
     efa:	95 0b       	sbc	r25, r21
     efc:	39 f4       	brne	.+14     	; 0xf0c <__fp_cmp+0x38>
     efe:	0a 26       	eor	r0, r26
     f00:	61 f0       	breq	.+24     	; 0xf1a <__fp_cmp+0x46>
     f02:	23 2b       	or	r18, r19
     f04:	24 2b       	or	r18, r20
     f06:	25 2b       	or	r18, r21
     f08:	21 f4       	brne	.+8      	; 0xf12 <__fp_cmp+0x3e>
     f0a:	08 95       	ret
     f0c:	0a 26       	eor	r0, r26
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__fp_cmp+0x3e>
     f10:	a1 40       	sbci	r26, 0x01	; 1
     f12:	a6 95       	lsr	r26
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	81 1d       	adc	r24, r1
     f18:	81 1d       	adc	r24, r1
     f1a:	08 95       	ret

00000f1c <__fp_inf>:
     f1c:	97 f9       	bld	r25, 7
     f1e:	9f 67       	ori	r25, 0x7F	; 127
     f20:	80 e8       	ldi	r24, 0x80	; 128
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	08 95       	ret

00000f28 <__fp_mintl>:
     f28:	88 23       	and	r24, r24
     f2a:	71 f4       	brne	.+28     	; 0xf48 <__fp_mintl+0x20>
     f2c:	77 23       	and	r23, r23
     f2e:	21 f0       	breq	.+8      	; 0xf38 <__fp_mintl+0x10>
     f30:	98 50       	subi	r25, 0x08	; 8
     f32:	87 2b       	or	r24, r23
     f34:	76 2f       	mov	r23, r22
     f36:	07 c0       	rjmp	.+14     	; 0xf46 <__fp_mintl+0x1e>
     f38:	66 23       	and	r22, r22
     f3a:	11 f4       	brne	.+4      	; 0xf40 <__fp_mintl+0x18>
     f3c:	99 27       	eor	r25, r25
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <__fp_mintl+0x32>
     f40:	90 51       	subi	r25, 0x10	; 16
     f42:	86 2b       	or	r24, r22
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	2a f0       	brmi	.+10     	; 0xf54 <__fp_mintl+0x2c>
     f4a:	9a 95       	dec	r25
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	da f7       	brpl	.-10     	; 0xf4a <__fp_mintl+0x22>
     f54:	88 0f       	add	r24, r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	97 f9       	bld	r25, 7
     f5c:	08 95       	ret

00000f5e <__fp_mpack>:
     f5e:	9f 3f       	cpi	r25, 0xFF	; 255
     f60:	31 f0       	breq	.+12     	; 0xf6e <__fp_mpack_finite+0xc>

00000f62 <__fp_mpack_finite>:
     f62:	91 50       	subi	r25, 0x01	; 1
     f64:	20 f4       	brcc	.+8      	; 0xf6e <__fp_mpack_finite+0xc>
     f66:	87 95       	ror	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b7 95       	ror	r27
     f6e:	88 0f       	add	r24, r24
     f70:	91 1d       	adc	r25, r1
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	97 f9       	bld	r25, 7
     f78:	08 95       	ret

00000f7a <__fp_nan>:
     f7a:	9f ef       	ldi	r25, 0xFF	; 255
     f7c:	80 ec       	ldi	r24, 0xC0	; 192
     f7e:	08 95       	ret

00000f80 <__fp_pscA>:
     f80:	00 24       	eor	r0, r0
     f82:	0a 94       	dec	r0
     f84:	16 16       	cp	r1, r22
     f86:	17 06       	cpc	r1, r23
     f88:	18 06       	cpc	r1, r24
     f8a:	09 06       	cpc	r0, r25
     f8c:	08 95       	ret

00000f8e <__fp_pscB>:
     f8e:	00 24       	eor	r0, r0
     f90:	0a 94       	dec	r0
     f92:	12 16       	cp	r1, r18
     f94:	13 06       	cpc	r1, r19
     f96:	14 06       	cpc	r1, r20
     f98:	05 06       	cpc	r0, r21
     f9a:	08 95       	ret

00000f9c <__fp_round>:
     f9c:	09 2e       	mov	r0, r25
     f9e:	03 94       	inc	r0
     fa0:	00 0c       	add	r0, r0
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <__fp_round+0xc>
     fa4:	88 23       	and	r24, r24
     fa6:	52 f0       	brmi	.+20     	; 0xfbc <__fp_round+0x20>
     fa8:	bb 0f       	add	r27, r27
     faa:	40 f4       	brcc	.+16     	; 0xfbc <__fp_round+0x20>
     fac:	bf 2b       	or	r27, r31
     fae:	11 f4       	brne	.+4      	; 0xfb4 <__fp_round+0x18>
     fb0:	60 ff       	sbrs	r22, 0
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <__fp_round+0x20>
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	8f 4f       	sbci	r24, 0xFF	; 255
     fba:	9f 4f       	sbci	r25, 0xFF	; 255
     fbc:	08 95       	ret

00000fbe <__fp_split3>:
     fbe:	57 fd       	sbrc	r21, 7
     fc0:	90 58       	subi	r25, 0x80	; 128
     fc2:	44 0f       	add	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	59 f0       	breq	.+22     	; 0xfde <__fp_splitA+0x10>
     fc8:	5f 3f       	cpi	r21, 0xFF	; 255
     fca:	71 f0       	breq	.+28     	; 0xfe8 <__fp_splitA+0x1a>
     fcc:	47 95       	ror	r20

00000fce <__fp_splitA>:
     fce:	88 0f       	add	r24, r24
     fd0:	97 fb       	bst	r25, 7
     fd2:	99 1f       	adc	r25, r25
     fd4:	61 f0       	breq	.+24     	; 0xfee <__fp_splitA+0x20>
     fd6:	9f 3f       	cpi	r25, 0xFF	; 255
     fd8:	79 f0       	breq	.+30     	; 0xff8 <__fp_splitA+0x2a>
     fda:	87 95       	ror	r24
     fdc:	08 95       	ret
     fde:	12 16       	cp	r1, r18
     fe0:	13 06       	cpc	r1, r19
     fe2:	14 06       	cpc	r1, r20
     fe4:	55 1f       	adc	r21, r21
     fe6:	f2 cf       	rjmp	.-28     	; 0xfcc <__fp_split3+0xe>
     fe8:	46 95       	lsr	r20
     fea:	f1 df       	rcall	.-30     	; 0xfce <__fp_splitA>
     fec:	08 c0       	rjmp	.+16     	; 0xffe <__fp_splitA+0x30>
     fee:	16 16       	cp	r1, r22
     ff0:	17 06       	cpc	r1, r23
     ff2:	18 06       	cpc	r1, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	f1 cf       	rjmp	.-30     	; 0xfda <__fp_splitA+0xc>
     ff8:	86 95       	lsr	r24
     ffa:	71 05       	cpc	r23, r1
     ffc:	61 05       	cpc	r22, r1
     ffe:	08 94       	sec
    1000:	08 95       	ret

00001002 <__fp_trunc>:
    1002:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_splitA>
    1006:	a0 f0       	brcs	.+40     	; 0x1030 <__fp_trunc+0x2e>
    1008:	be e7       	ldi	r27, 0x7E	; 126
    100a:	b9 17       	cp	r27, r25
    100c:	88 f4       	brcc	.+34     	; 0x1030 <__fp_trunc+0x2e>
    100e:	bb 27       	eor	r27, r27
    1010:	9f 38       	cpi	r25, 0x8F	; 143
    1012:	60 f4       	brcc	.+24     	; 0x102c <__fp_trunc+0x2a>
    1014:	16 16       	cp	r1, r22
    1016:	b1 1d       	adc	r27, r1
    1018:	67 2f       	mov	r22, r23
    101a:	78 2f       	mov	r23, r24
    101c:	88 27       	eor	r24, r24
    101e:	98 5f       	subi	r25, 0xF8	; 248
    1020:	f7 cf       	rjmp	.-18     	; 0x1010 <__fp_trunc+0xe>
    1022:	86 95       	lsr	r24
    1024:	77 95       	ror	r23
    1026:	67 95       	ror	r22
    1028:	b1 1d       	adc	r27, r1
    102a:	93 95       	inc	r25
    102c:	96 39       	cpi	r25, 0x96	; 150
    102e:	c8 f3       	brcs	.-14     	; 0x1022 <__fp_trunc+0x20>
    1030:	08 95       	ret

00001032 <__fp_zero>:
    1032:	e8 94       	clt

00001034 <__fp_szero>:
    1034:	bb 27       	eor	r27, r27
    1036:	66 27       	eor	r22, r22
    1038:	77 27       	eor	r23, r23
    103a:	cb 01       	movw	r24, r22
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret

00001040 <_exit>:
    1040:	f8 94       	cli

00001042 <__stop_program>:
    1042:	ff cf       	rjmp	.-2      	; 0x1042 <__stop_program>
